{"description": "Vasya, like many others, likes to participate in a variety of sweepstakes and lotteries. Now he collects wrappings from a famous chocolate bar \"Jupiter\". According to the sweepstake rules, each wrapping has an integer written on it \u2014 the number of points that the participant adds to his score as he buys the bar. After a participant earns a certain number of points, he can come to the prize distribution center and exchange the points for prizes. When somebody takes a prize, the prize's cost is simply subtracted from the number of his points.Vasya didn't only bought the bars, he also kept a record of how many points each wrapping cost. Also, he remembers that he always stucks to the greedy strategy \u2014 as soon as he could take at least one prize, he went to the prize distribution centre and exchanged the points for prizes. Moreover, if he could choose between multiple prizes, he chose the most expensive one. If after an exchange Vasya had enough points left to get at least one more prize, then he continued to exchange points.The sweepstake has the following prizes (the prizes are sorted by increasing of their cost):   a mug (costs a points),  a towel (costs b points),  a bag (costs c points),  a bicycle (costs d points),  a car (costs e points). Now Vasya wants to recollect what prizes he has received. You know sequence p1,\u2009p2,\u2009...,\u2009pn, where pi is the number of points Vasya got for the i-th bar. The sequence of points is given in the chronological order. You also know numbers a, b, c, d, e. Your task is to find, how many prizes Vasya received, what prizes they are and how many points he's got left after all operations are completed.", "input_specification": "The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u200950) \u2014 the number of chocolate bar wrappings that brought points to Vasya. The second line contains space-separated integers p1,\u2009p2,\u2009...,\u2009pn (1\u2009\u2264\u2009pi\u2009\u2264\u2009109). The third line contains 5 integers a, b, c, d, e (1\u2009\u2264\u2009a\u2009&lt;\u2009b\u2009&lt;\u2009c\u2009&lt;\u2009d\u2009&lt;\u2009e\u2009\u2264\u2009109) \u2014 the prizes' costs.", "output_specification": "Print on the first line 5 integers, separated by a space \u2014 the number of mugs, towels, bags, bicycles and cars that Vasya has got, respectively. On the second line print a single integer \u2014 the number of points Vasya will have left after all operations of exchange are completed. Please, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.", "notes": "NoteIn the first sample Vasya gets 3 points after eating the first chocolate bar. Then he exchanges 2 points and gets a mug. Vasya wins a bag after eating the second chocolate bar. Then he wins a towel after eating the third chocolate bar. After all chocolate bars 3\u2009-\u20092\u2009+\u200910\u2009-\u200910\u2009+\u20094\u2009-\u20094\u2009=\u20091 points remains.", "sample_inputs": ["3\n3 10 4\n2 4 10 15 20", "4\n10 4 39 2\n3 5 10 11 12"], "sample_outputs": ["1 1 1 0 0 \n1", "3 0 1 0 3 \n0"], "src_uid": "1ae2942b72ebb7c55359c41e141900d7", "lang_cluster": "Python", "difficulty": 1200, "human_solution": "n = int(raw_input())\npts = [int(i) for i in raw_input().split()]\ngoods = [int(i) for i in raw_input().split()]\n\nleft = 0\ngets = [0]*5\nfor p in pts:\n    left += p\n    for i in xrange(4, -1, -1):\n        gets[i] += left/goods[i]\n        left %= goods[i]\nprint gets[0], gets[1], gets[2], gets[3], gets[4]\nprint left\n", "testcases": "[{'input': '3\\r\\n3 10 4\\r\\n2 4 10 15 20\\r\\n', 'output': ['1 1 1 0 0 \\r\\n1\\r\\n']}, {'input': '4\\r\\n10 4 39 2\\r\\n3 5 10 11 12\\r\\n', 'output': ['3 0 1 0 3 \\r\\n0\\r\\n']}, {'input': '1\\r\\n45\\r\\n1 2 3 4 5\\r\\n', 'output': ['0 0 0 0 9 \\r\\n0\\r\\n']}, {'input': '1\\r\\n50\\r\\n1 2 4 5 6\\r\\n', 'output': ['0 1 0 0 8 \\r\\n0\\r\\n']}, {'input': '1\\r\\n6\\r\\n1 2 4 6 7\\r\\n', 'output': ['0 0 0 1 0 \\r\\n0\\r\\n']}, {'input': '1\\r\\n11\\r\\n1 2 3 6 8\\r\\n', 'output': ['0 0 1 0 1 \\r\\n0\\r\\n']}, {'input': '45\\r\\n54672703 354223499 798425228 192616902 934526477 130046515 120969797 1128116 221465324 487958664 211577865 653388287 538234 467693667 387627267 811104156 26715905 108515494 288069433 106690737 712686358 683861047 56548860 385125409 178325602 329144983 320699771 611743158 176982141 882718242 574909811 18981354 497482742 126502373 342328066 970474066 352019823 333022487 625437081 18635432 354739941 509867062 781623566 885791347 684953358\\r\\n1 2 3 4 5\\r\\n', 'output': ['10 15 9 7 3554511651 \\r\\n0\\r\\n']}, {'input': '5\\r\\n43 4 16 36 41\\r\\n5 6 7 8 9\\r\\n', 'output': ['0 0 2 0 14 \\r\\n0\\r\\n']}, {'input': '5\\r\\n6 6 47 32 28\\r\\n1 2 6 9 11\\r\\n', 'output': ['2 1 3 1 8 \\r\\n0\\r\\n']}, {'input': '5\\r\\n30 25 31 47 40\\r\\n1 3 6 13 20\\r\\n', 'output': ['6 3 3 0 7 \\r\\n0\\r\\n']}, {'input': '10\\r\\n588141495 24894836 162095938 610922780 767639361 522148294 556163403 302924834 618125209 410537083\\r\\n1 2 3 4 5\\r\\n', 'output': ['2 0 3 3 912718642 \\r\\n0\\r\\n']}, {'input': '10\\r\\n5 37 8 21 10 13 36 4 40 26\\r\\n3 5 6 7 10\\r\\n', 'output': ['1 2 1 3 16 \\r\\n0\\r\\n']}, {'input': '10\\r\\n3 25 17 20 25 26 15 35 47 16\\r\\n5 8 11 14 15\\r\\n', 'output': ['1 1 3 0 12 \\r\\n3\\r\\n']}, {'input': '10\\r\\n1 10 34 9 49 42 45 8 42 7\\r\\n2 6 11 13 14\\r\\n', 'output': ['5 5 1 0 14 \\r\\n0\\r\\n']}, {'input': '15\\r\\n13 44 13 13 38 25 43 25 40 28 5 23 25 41 6\\r\\n1 2 3 4 5\\r\\n', 'output': ['2 0 7 1 71 \\r\\n0\\r\\n']}, {'input': '15\\r\\n195995511 767544072 924890005 342377584 638748004 904551320 222776859 921356712 204326392 225923474 90658415 610365756 971907038 41090763 853207872\\r\\n5 7 8 9 10\\r\\n', 'output': ['3 0 3 2 791571972 \\r\\n0\\r\\n']}, {'input': '15\\r\\n14 19 5 16 11 22 40 7 13 21 24 26 49 22 26\\r\\n1 2 7 8 9\\r\\n', 'output': ['4 19 2 2 27 \\r\\n0\\r\\n']}, {'input': '15\\r\\n5 41 46 48 22 49 5 37 10 4 19 2 16 32 24\\r\\n2 11 15 18 20\\r\\n', 'output': ['30 1 2 1 12 \\r\\n1\\r\\n']}, {'input': '15\\r\\n50 12 36 11 38 28 4 11 29 34 22 46 43 2 29\\r\\n7 8 10 17 23\\r\\n', 'output': ['1 0 6 3 12 \\r\\n1\\r\\n']}, {'input': '15\\r\\n676837988 94471701 777591167 399710490 409807125 414445437 8315750 102835211 36239666 141260442 589733329 572072035 789807197 431009789 123234386\\r\\n20 39 45 46 48\\r\\n', 'output': ['5 2 1 0 115986906 \\r\\n2\\r\\n']}, {'input': '25\\r\\n26 29 17 11 35 21 11 22 17 24 41 44 27 34 42 24 44 3 8 25 23 6 16 41 2\\r\\n1 2 3 4 5\\r\\n', 'output': ['8 6 3 6 108 \\r\\n0\\r\\n']}, {'input': '25\\r\\n46 37 12 28 16 9 26 12 31 49 28 23 39 49 21 40 1 31 8 6 33 46 4 12 20\\r\\n5 6 7 8 10\\r\\n', 'output': ['1 2 2 3 57 \\r\\n2\\r\\n']}, {'input': '25\\r\\n48 3 22 29 40 21 28 31 22 16 17 3 47 37 38 15 16 27 41 48 17 11 22 15 15\\r\\n10 11 12 13 15\\r\\n', 'output': ['1 1 1 2 38 \\r\\n0\\r\\n']}, {'input': '49\\r\\n150841996 278751430 236103841 373294104 702072537 197872718 286517088 985323686 816421587 49928785 500114241 47334350 280942286 86728792 606895563 70696090 770589765 492645787 250574857 747511645 224488546 90659419 587972065 281798558 133719196 726362846 487266436 311413921 795767163 779792904 646907905 87907470 461431159 273590163 584894453 408543297 215247358 47704043 300890973 570589101 134168725 904691113 260042124 834209517 554685974 348043433 100083255 966828009 508031511\\r\\n1 2 3 4 5\\r\\n', 'output': ['12 7 12 7 4111778339 \\r\\n0\\r\\n']}, {'input': '25\\r\\n43 34 26 43 11 13 34 8 6 25 39 41 21 34 27 12 11 1 36 45 47 12 18 43 38\\r\\n1 2 10 24 25\\r\\n', 'output': ['11 46 19 0 15 \\r\\n0\\r\\n']}, {'input': '25\\r\\n38 30 40 7 7 18 43 5 29 49 50 9 4 18 30 35 21 22 15 33 9 31 32 22 6\\r\\n2 14 15 40 48\\r\\n', 'output': ['48 0 22 2 2 \\r\\n1\\r\\n']}, {'input': '50\\r\\n667406402 354775600 95220950 604569294 945922983 82947113 120853697 25192357 911801905 8804755 572528228 687361070 180664274 949243037 5283222 74969288 23627567 882714363 413386071 937062768 916521072 864701923 328941225 17876118 770879655 928962609 331124489 236187404 878629850 202558122 227732104 296494363 555832750 391788125 553472395 587090096 991781042 382982437 764518939 870576820 596491334 48319052 813976810 545209721 619789095 955839818 282149347 476620368 134986392 655856299\\r\\n1 2 3 4 5\\r\\n', 'output': ['3 13 11 9 4954444924 \\r\\n0\\r\\n']}, {'input': '50\\r\\n7 33 16 27 6 26 21 46 28 43 34 28 44 21 40 32 47 47 29 22 25 18 31 18 37 3 47 43 37 25 33 10 29 43 44 33 45 14 43 5 27 25 35 20 9 13 49 9 21 26\\r\\n3 4 5 7 9\\r\\n', 'output': ['4 6 6 15 138 \\r\\n1\\r\\n']}, {'input': '45\\r\\n18 21 6 3 48 23 5 26 37 6 49 6 42 19 8 39 38 47 36 22 13 21 14 32 43 42 5 30 35 36 16 34 32 8 1 37 14 29 39 50 25 26 10 25 39\\r\\n1 6 7 8 14\\r\\n', 'output': ['77 5 4 19 62 \\r\\n0\\r\\n']}, {'input': '45\\r\\n28 28 3 4 7 34 44 2 8 7 20 29 27 49 20 33 11 31 47 38 41 40 11 16 5 20 12 47 49 25 25 6 40 3 2 3 32 38 34 21 28 48 12 39 43\\r\\n9 10 12 14 20\\r\\n', 'output': ['4 5 2 8 44 \\r\\n8\\r\\n']}, {'input': '50\\r\\n17 30 29 29 50 42 15 18 34 10 30 3 44 11 4 35 42 8 14 41 30 4 11 1 3 23 7 28 35 6 24 37 6 12 8 7 36 40 41 26 13 46 15 40 32 34 15 28 46 31\\r\\n20 24 40 46 50\\r\\n', 'output': ['4 11 9 5 5 \\r\\n7\\r\\n']}]", "id": 136, "lang": "python2", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "Vasya's bicycle chain drive consists of two parts: n stars are attached to the pedal axle, m stars are attached to the rear wheel axle. The chain helps to rotate the rear wheel by transmitting the pedal rotation.We know that the i-th star on the pedal axle has ai (0\u2009&lt;\u2009a1\u2009&lt;\u2009a2\u2009&lt;\u2009...\u2009&lt;\u2009an) teeth, and the j-th star on the rear wheel axle has bj (0\u2009&lt;\u2009b1\u2009&lt;\u2009b2\u2009&lt;\u2009...\u2009&lt;\u2009bm) teeth. Any pair (i,\u2009j) (1\u2009\u2264\u2009i\u2009\u2264\u2009n;\u00a01\u2009\u2264\u2009j\u2009\u2264\u2009m) is called a gear and sets the indexes of stars to which the chain is currently attached. Gear (i,\u2009j) has a gear ratio, equal to the value .Since Vasya likes integers, he wants to find such gears (i,\u2009j), that their ratios are integers. On the other hand, Vasya likes fast driving, so among all \"integer\" gears (i,\u2009j) he wants to choose a gear with the maximum ratio. Help him to find the number of such gears.In the problem, fraction  denotes division in real numbers, that is, no rounding is performed.", "input_specification": "The first input line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u200950) \u2014 the number of stars on the bicycle's pedal axle. The second line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009104) in the order of strict increasing. The third input line contains integer m (1\u2009\u2264\u2009m\u2009\u2264\u200950) \u2014 the number of stars on the rear wheel axle. The fourth line contains m integers b1,\u2009b2,\u2009...,\u2009bm (1\u2009\u2264\u2009bi\u2009\u2264\u2009104) in the order of strict increasing. It is guaranteed that there exists at least one gear (i,\u2009j), that its gear ratio is an integer. The numbers on the lines are separated by spaces.", "output_specification": "Print the number of \"integer\" gears with the maximum ratio among all \"integer\" gears.", "notes": "NoteIn the first sample the maximum \"integer\" gear ratio equals 3. There are two gears that have such gear ratio. For one of them a1\u2009=\u20094,\u2009b1\u2009=\u200912, and for the other a2\u2009=\u20095,\u2009b3\u2009=\u200915.", "sample_inputs": ["2\n4 5\n3\n12 13 15", "4\n1 2 3 4\n5\n10 11 12 13 14"], "sample_outputs": ["2", "1"], "src_uid": "102667eaa3aee012fef70f4192464674", "lang_cluster": "Python", "difficulty": 900, "human_solution": "import collections as cl\n\n\nn, a = int(input()), map(int, input().split())\nm, b = int(input()), list(map(int, input().split()))\n\nans = cl.Counter([xb // xa for xa in a for xb in b if xb % xa == 0])\nprint(ans[max(ans.keys())])\n", "testcases": "[{'input': '2\\r\\n4 5\\r\\n3\\r\\n12 13 15\\r\\n', 'output': ['2\\r\\n']}, {'input': '4\\r\\n1 2 3 4\\r\\n5\\r\\n10 11 12 13 14\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n1\\r\\n1\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\n1\\r\\n2\\r\\n1 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n3 7 11 13\\r\\n4\\r\\n51 119 187 221\\r\\n', 'output': ['4\\r\\n']}, {'input': '4\\r\\n2 3 4 5\\r\\n3\\r\\n1 2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n6 12 13 20 48 53 74 92 96 97\\r\\n10\\r\\n1 21 32 36 47 54 69 75 95 97\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n5 9 10 14 15 17 19 22 24 26\\r\\n10\\r\\n2 11 17 19 21 22 24 25 27 28\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n24 53 56 126 354 432 442 740 795 856\\r\\n10\\r\\n273 438 494 619 689 711 894 947 954 958\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n3 4 6 7 8 10 14 16 19 20\\r\\n10\\r\\n3 4 5 7 8 10 15 16 18 20\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n1 6 8 14 15 17 25 27 34 39\\r\\n10\\r\\n1 8 16 17 19 22 32 39 44 50\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n5 21 22 23 25 32 35 36 38 39\\r\\n10\\r\\n3 7 8 9 18 21 23 24 36 38\\r\\n', 'output': ['4\\r\\n']}, {'input': '50\\r\\n5 8 13 16 19 20 21 22 24 27 28 29 30 32 33 34 35 43 45 48 50 51 54 55 58 59 60 61 62 65 70 71 72 76 78 79 80 81 83 84 85 87 89 91 92 94 97 98 99 100\\r\\n50\\r\\n2 3 5 6 7 10 15 16 17 20 23 28 29 30 31 34 36 37 40 42 45 46 48 54 55 56 58 59 61 62 69 70 71 72 75 76 78 82 84 85 86 87 88 89 90 91 92 97 99 100\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n3 5 6 8 9 11 13 19 21 23 24 32 34 35 42 50 51 52 56 58 59 69 70 72 73 75 76 77 78 80 83 88 90 95 96 100 101 102 108 109 113 119 124 135 138 141 142 143 145 150\\r\\n50\\r\\n5 8 10 11 18 19 23 30 35 43 51 53 55 58 63 68 69 71 77 78 79 82 83 86 88 89 91 92 93 94 96 102 103 105 109 110 113 114 116 123 124 126 127 132 133 135 136 137 142 149\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n6 16 24 25 27 33 36 40 51 60 62 65 71 72 75 77 85 87 91 93 98 102 103 106 117 118 120 121 122 123 125 131 134 136 143 148 155 157 160 161 164 166 170 178 184 187 188 192 194 197\\r\\n50\\r\\n5 9 17 23 27 34 40 44 47 59 62 70 81 82 87 88 89 90 98 101 102 110 113 114 115 116 119 122 124 128 130 137 138 140 144 150 152 155 159 164 166 169 171 175 185 186 187 189 190 193\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n14 22 23 31 32 35 48 63 76 79 88 97 101 102 103 104 106 113 114 115 116 126 136 138 145 152 155 156 162 170 172 173 179 180 182 203 208 210 212 222 226 229 231 232 235 237 245 246 247 248\\r\\n50\\r\\n2 5 6 16 28 44 45 46 54 55 56 63 72 80 87 93 94 96 97 100 101 103 132 135 140 160 164 165 167 168 173 180 182 185 186 192 194 198 199 202 203 211 213 216 217 227 232 233 236 245\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n14 19 33 35 38 41 51 54 69 70 71 73 76 80 84 94 102 104 105 106 107 113 121 128 131 168 180 181 187 191 195 201 205 207 210 216 220 238 249 251 263 271 272 275 281 283 285 286 291 294\\r\\n50\\r\\n2 3 5 20 21 35 38 40 43 48 49 52 55 64 73 77 82 97 109 113 119 121 125 132 137 139 145 146 149 180 182 197 203 229 234 241 244 251 264 271 274 281 284 285 287 291 292 293 294 298\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n2 4 5 16 18 19 22 23 25 26 34 44 48 54 67 79 80 84 92 110 116 133 138 154 163 171 174 202 205 218 228 229 234 245 247 249 250 263 270 272 274 275 277 283 289 310 312 334 339 342\\r\\n50\\r\\n1 5 17 18 25 37 46 47 48 59 67 75 80 83 84 107 115 122 137 141 159 162 175 180 184 204 221 224 240 243 247 248 249 258 259 260 264 266 269 271 274 293 294 306 329 330 334 335 342 350\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n6 9 11 21 28 39 42 56 60 63 81 88 91 95 105 110 117 125 149 165 174 176 185 189 193 196 205 231 233 268 278 279 281 286 289 292 298 303 305 306 334 342 350 353 361 371 372 375 376 378\\r\\n50\\r\\n6 17 20 43 45 52 58 59 82 83 88 102 111 118 121 131 145 173 190 191 200 216 224 225 232 235 243 256 260 271 290 291 321 322 323 329 331 333 334 341 343 348 351 354 356 360 366 379 387 388\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n17 239 443 467 661 1069 1823 2333 3767 4201\\r\\n20\\r\\n51 83 97 457 593 717 997 1329 1401 1459 1471 1983 2371 2539 3207 3251 3329 5469 6637 6999\\r\\n', 'output': ['8\\r\\n']}, {'input': '20\\r\\n179 359 401 467 521 601 919 941 1103 1279 1709 1913 1949 2003 2099 2143 2179 2213 2399 4673\\r\\n20\\r\\n151 181 191 251 421 967 1109 1181 1249 1447 1471 1553 1619 2327 2551 2791 3049 3727 6071 7813\\r\\n', 'output': ['3\\r\\n']}, {'input': '20\\r\\n79 113 151 709 809 983 1291 1399 1409 1429 2377 2659 2671 2897 3217 3511 3557 3797 3823 4363\\r\\n10\\r\\n19 101 659 797 1027 1963 2129 2971 3299 9217\\r\\n', 'output': ['3\\r\\n']}, {'input': '30\\r\\n19 47 109 179 307 331 389 401 461 509 547 569 617 853 883 1249 1361 1381 1511 1723 1741 1783 2459 2531 2621 3533 3821 4091 5557 6217\\r\\n20\\r\\n401 443 563 941 967 997 1535 1567 1655 1747 1787 1945 1999 2251 2305 2543 2735 4415 6245 7555\\r\\n', 'output': ['8\\r\\n']}, {'input': '30\\r\\n3 43 97 179 257 313 353 359 367 389 397 457 547 599 601 647 1013 1021 1063 1433 1481 1531 1669 3181 3373 3559 3769 4157 4549 5197\\r\\n50\\r\\n13 15 17 19 29 79 113 193 197 199 215 223 271 293 359 485 487 569 601 683 895 919 941 967 1283 1285 1289 1549 1565 1765 1795 1835 1907 1931 1945 1985 1993 2285 2731 2735 2995 3257 4049 4139 5105 5315 7165 7405 7655 8345\\r\\n', 'output': ['20\\r\\n']}, {'input': '50\\r\\n11 17 23 53 59 109 137 149 173 251 353 379 419 421 439 503 593 607 661 773 821 877 941 997 1061 1117 1153 1229 1289 1297 1321 1609 1747 2311 2389 2543 2693 3041 3083 3137 3181 3209 3331 3373 3617 3767 4201 4409 4931 6379\\r\\n50\\r\\n55 59 67 73 85 89 101 115 211 263 295 353 545 599 607 685 739 745 997 1031 1255 1493 1523 1667 1709 1895 1949 2161 2195 2965 3019 3035 3305 3361 3373 3673 3739 3865 3881 4231 4253 4385 4985 5305 5585 5765 6145 6445 8045 8735\\r\\n', 'output': ['23\\r\\n']}, {'input': '5\\r\\n33 78 146 3055 4268\\r\\n5\\r\\n2211 2584 5226 9402 9782\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n35 48 52 86 8001\\r\\n10\\r\\n332 3430 3554 4704 4860 5096 6215 7583 8228 8428\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n97 184 207 228 269 2084 4450 6396 7214 9457\\r\\n16\\r\\n338 1179 1284 1545 1570 2444 3167 3395 3397 5550 6440 7245 7804 7980 9415 9959\\r\\n', 'output': ['5\\r\\n']}, {'input': '30\\r\\n25 30 41 57 58 62 70 72 76 79 84 85 88 91 98 101 104 109 119 129 136 139 148 151 926 1372 3093 3936 5423 7350\\r\\n25\\r\\n1600 1920 2624 3648 3712 3968 4480 4608 4864 5056 5376 5440 5632 5824 6272 6464 6656 6934 6976 7616 8256 8704 8896 9472 9664\\r\\n', 'output': ['24\\r\\n']}, {'input': '5\\r\\n33 78 146 3055 4268\\r\\n5\\r\\n2211 2584 5226 9402 9782\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n35 48 52 86 8001\\r\\n10\\r\\n332 3430 3554 4704 4860 5096 6215 7583 8228 8428\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n97 184 207 228 269 2084 4450 6396 7214 9457\\r\\n16\\r\\n338 1179 1284 1545 1570 2444 3167 3395 3397 5550 6440 7245 7804 7980 9415 9959\\r\\n', 'output': ['5\\r\\n']}, {'input': '30\\r\\n25 30 41 57 58 62 70 72 76 79 84 85 88 91 98 101 104 109 119 129 136 139 148 151 926 1372 3093 3936 5423 7350\\r\\n25\\r\\n1600 1920 2624 3648 3712 3968 4480 4608 4864 5056 5376 5440 5632 5824 6272 6464 6656 6934 6976 7616 8256 8704 8896 9472 9664\\r\\n', 'output': ['24\\r\\n']}, {'input': '47\\r\\n66 262 357 457 513 530 538 540 592 691 707 979 1015 1242 1246 1667 1823 1886 1963 2133 2649 2679 2916 2949 3413 3523 3699 3958 4393 4922 5233 5306 5799 6036 6302 6629 7208 7282 7315 7822 7833 7927 8068 8150 8870 8962 9987\\r\\n39\\r\\n167 199 360 528 1515 1643 1986 1988 2154 2397 2856 3552 3656 3784 3980 4096 4104 4240 4320 4736 4951 5266 5656 5849 5850 6169 6517 6875 7244 7339 7689 7832 8120 8716 9503 9509 9933 9936 9968\\r\\n', 'output': ['12\\r\\n']}, {'input': '1\\r\\n94\\r\\n50\\r\\n423 446 485 1214 1468 1507 1853 1930 1999 2258 2271 2285 2425 2543 2715 2743 2992 3196 4074 4108 4448 4475 4652 5057 5250 5312 5356 5375 5731 5986 6298 6501 6521 7146 7255 7276 7332 7481 7998 8141 8413 8665 8908 9221 9336 9491 9504 9677 9693 9706\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n51 67 75 186 194 355 512 561 720 876 1077 1221 1503 1820 2153 2385 2568 2608 2937 2969 3271 3311 3481 4081 4093 4171 4255 4256 4829 5020 5192 5636 5817 6156 6712 6717 7153 7436 7608 7612 7866 7988 8264 8293 8867 9311 9879 9882 9889 9908\\r\\n1\\r\\n5394\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n26 367 495 585 675 789 855 1185 1312 1606 2037 2241 2587 2612 2628 2807 2873 2924 3774 4067 4376 4668 4902 5001 5082 5100 5104 5209 5345 5515 5661 5777 5902 5907 6155 6323 6675 6791 7503 8159 8207 8254 8740 8848 8855 8933 9069 9164 9171 9586\\r\\n5\\r\\n1557 6246 7545 8074 8284\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n25 58 91 110 2658\\r\\n50\\r\\n21 372 909 1172 1517 1554 1797 1802 1843 1977 2006 2025 2137 2225 2317 2507 2645 2754 2919 3024 3202 3212 3267 3852 4374 4487 4553 4668 4883 4911 4916 5016 5021 5068 5104 5162 5683 5856 6374 6871 7333 7531 8099 8135 8173 8215 8462 8776 9433 9790\\r\\n', 'output': ['4\\r\\n']}, {'input': '45\\r\\n37 48 56 59 69 70 79 83 85 86 99 114 131 134 135 145 156 250 1739 1947 2116 2315 2449 3104 3666 4008 4406 4723 4829 5345 5836 6262 6296 6870 7065 7110 7130 7510 7595 8092 8442 8574 9032 9091 9355\\r\\n50\\r\\n343 846 893 1110 1651 1837 2162 2331 2596 3012 3024 3131 3294 3394 3528 3717 3997 4125 4347 4410 4581 4977 5030 5070 5119 5229 5355 5413 5418 5474 5763 5940 6151 6161 6164 6237 6506 6519 6783 7182 7413 7534 8069 8253 8442 8505 9135 9308 9828 9902\\r\\n', 'output': ['17\\r\\n']}, {'input': '50\\r\\n17 20 22 28 36 38 46 47 48 50 52 57 58 62 63 69 70 74 75 78 79 81 82 86 87 90 93 95 103 202 292 442 1756 1769 2208 2311 2799 2957 3483 4280 4324 4932 5109 5204 6225 6354 6561 7136 8754 9670\\r\\n40\\r\\n68 214 957 1649 1940 2078 2134 2716 3492 3686 4462 4559 4656 4756 4850 5044 5490 5529 5592 5626 6014 6111 6693 6790 7178 7275 7566 7663 7702 7857 7954 8342 8511 8730 8957 9021 9215 9377 9445 9991\\r\\n', 'output': ['28\\r\\n']}, {'input': '39\\r\\n10 13 21 25 36 38 47 48 58 64 68 69 73 79 86 972 2012 2215 2267 2503 3717 3945 4197 4800 5266 6169 6612 6824 7023 7322 7582 7766 8381 8626 8879 9079 9088 9838 9968\\r\\n50\\r\\n432 877 970 1152 1202 1223 1261 1435 1454 1578 1843 1907 2003 2037 2183 2195 2215 2425 3065 3492 3615 3637 3686 3946 4189 4415 4559 4656 4665 4707 4886 4887 5626 5703 5955 6208 6521 6581 6596 6693 6985 7013 7081 7343 7663 8332 8342 8637 9207 9862\\r\\n', 'output': ['15\\r\\n']}, {'input': '50\\r\\n7 144 269 339 395 505 625 688 709 950 1102 1152 1350 1381 1641 1830 1977 1999 2093 2180 2718 3308 3574 4168 4232 4259 4393 4689 4982 5154 5476 5581 5635 5721 6159 6302 6741 7010 7152 7315 7417 7482 8116 8239 8640 9347 9395 9614 9661 9822\\r\\n20\\r\\n84 162 292 1728 1866 2088 3228 3470 4068 5318 5470 6060 6380 6929 7500 8256 8399 8467 8508 9691\\r\\n', 'output': ['8\\r\\n']}, {'input': '50\\r\\n159 880 1070 1139 1358 1608 1691 1841 2073 2171 2213 2597 2692 2759 2879 2931 3173 3217 3441 4201 4878 5106 5129 5253 5395 5647 5968 6019 6130 6276 6286 6330 6409 6728 7488 7713 7765 7828 7899 8064 8264 8457 8483 8685 8900 8946 8965 9133 9187 9638\\r\\n45\\r\\n57 159 1070 1139 1391 1608 1691 1841 2171 2213 2692 2759 2931 3173 3217 3441 4201 4878 5106 5129 5253 5647 5968 6130 6276 6286 6409 7488 7694 7713 7765 7828 7899 8003 8064 8081 8244 8264 8685 8900 8946 8965 9133 9638 9673\\r\\n', 'output': ['38\\r\\n']}, {'input': '3\\r\\n3 4 5\\r\\n3\\r\\n6 20 25\\r\\n', 'output': ['2\\r\\n']}, {'input': '4\\r\\n2 3 5 8\\r\\n4\\r\\n2 6 8 10\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n3 5 7 11\\r\\n4\\r\\n3 5 7 22\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n3\\r\\n20 30 50\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n4\\r\\n2 4 6 49\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n4 5\\r\\n3\\r\\n12 15 20\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n2 5 7\\r\\n3\\r\\n4 5 7\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n3 5 8\\r\\n3\\r\\n6 8 10\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n4\\r\\n4 6 9 33\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n4\\r\\n4 6 21 40\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n4 9 10\\r\\n3\\r\\n8 9 10\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 5 6 9 51\\r\\n5\\r\\n5 12 18 27 10000\\r\\n', 'output': ['1\\r\\n']}, {'input': '13\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\r\\n1\\r\\n14\\r\\n', 'output': ['1\\r\\n']}]", "id": 137, "lang": "python3", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "The only difference between easy and hard versions is constraints.Nauuo is a girl who loves random picture websites.One day she made a random picture website by herself which includes $$$n$$$ pictures.When Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $$$i$$$-th picture has a non-negative weight $$$w_i$$$, and the probability of the $$$i$$$-th picture being displayed is $$$\\frac{w_i}{\\sum_{j=1}^nw_j}$$$. That is to say, the probability of a picture to be displayed is proportional to its weight.However, Nauuo discovered that some pictures she does not like were displayed too often. To solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $$$1$$$ to its weight; otherwise, she would subtract $$$1$$$ from its weight.Nauuo will visit the website $$$m$$$ times. She wants to know the expected weight of each picture after all the $$$m$$$ visits modulo $$$998244353$$$. Can you help her?The expected weight of the $$$i$$$-th picture can be denoted by $$$\\frac {q_i} {p_i}$$$ where $$$\\gcd(p_i,q_i)=1$$$, you need to print an integer $$$r_i$$$ satisfying $$$0\\le r_i&lt;998244353$$$ and $$$r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$$$. It can be proved that such $$$r_i$$$ exists and is unique.", "input_specification": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1\\le n\\le 2\\cdot 10^5$$$, $$$1\\le m\\le 3000$$$) \u2014 the number of pictures and the number of visits to the website. The second line contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$a_i$$$ is either $$$0$$$ or $$$1$$$) \u2014 if $$$a_i=0$$$ , Nauuo does not like the $$$i$$$-th picture; otherwise Nauuo likes the $$$i$$$-th picture. It is guaranteed that there is at least one picture which Nauuo likes. The third line contains $$$n$$$ positive integers $$$w_1,w_2,\\ldots,w_n$$$ ($$$w_i \\geq 1$$$) \u2014 the initial weights of the pictures. It is guaranteed that the sum of all the initial weights does not exceed $$$998244352-m$$$.", "output_specification": "The output contains $$$n$$$ integers $$$r_1,r_2,\\ldots,r_n$$$ \u2014 the expected weights modulo $$$998244353$$$.", "notes": "NoteIn the first example, if the only visit shows the first picture with a probability of $$$\\frac 2 3$$$, the final weights are $$$(1,1)$$$; if the only visit shows the second picture with a probability of $$$\\frac1 3$$$, the final weights are $$$(2,2)$$$.So, both expected weights are $$$\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$$$ .Because $$$332748119\\cdot 3\\equiv 4\\pmod{998244353}$$$, you need to print $$$332748119$$$ instead of $$$\\frac4 3$$$ or $$$1.3333333333$$$.In the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $$$w_1$$$ will be increased by $$$1$$$.So, the expected weight is $$$1+2=3$$$.Nauuo is very naughty so she didn't give you any hint of the third example.", "sample_inputs": ["2 1\n0 1\n2 1", "1 2\n1\n1", "3 3\n0 1 1\n4 3 5"], "sample_outputs": ["332748119\n332748119", "3", "160955686\n185138929\n974061117"], "src_uid": "ba9c136f84375cd317f0f8b53e3939c7", "lang_cluster": "Python", "difficulty": 2600, "human_solution": "P = 998244353\nN, M = map(int, input().split())\nA = [int(a) for a in input().split()]\nB = [int(a) for a in input().split()]\nli = sum([A[i]*B[i] for i in range(N)])\ndi = sum([(A[i]^1)*B[i] for i in range(N)])\nX = [1]\nSU = li+di\nPO = [0] * (5*M+10)\nfor i in range(-M-5, 2*M+5):\n    PO[i] = pow((SU+i)%P, P-2, P)\n\ndef calc(L):\n    su = sum(L)\n    pl = 0\n    pd = 0\n    RE = []\n    for i in range(len(L)):\n        a = li + i\n        b = di - (len(L) - 1 - i)\n        pd = b * L[i] * PO[a+b-SU]\n        RE.append((pl+pd)%P)\n        pl = a * L[i] * PO[a+b-SU]\n    RE.append(pl%P)\n    return RE\n\nfor i in range(M):\n    X = calc(X)\nne = 0\npo = 0\nfor i in range(M+1):\n    po = (po + X[i] * (li + i)) % P\n    ne = (ne + X[i] * (di - M + i)) % P\ninvli = pow(li, P-2, P)\ninvdi = pow(di, P-2, P)\nfor i in range(N):\n    print(po * B[i] * invli % P if A[i] else ne * B[i] * invdi % P)\n", "testcases": "[{'input': '2 1\\r\\n0 1\\r\\n2 1\\r\\n', 'output': ['332748119\\r\\n332748119']}, {'input': '1 2\\r\\n1\\r\\n1\\r\\n', 'output': ['3']}, {'input': '3 3\\r\\n0 1 1\\r\\n4 3 5\\r\\n', 'output': ['160955686\\r\\n185138929\\r\\n974061117']}, {'input': '5 5\\r\\n0 1 0 0 1\\r\\n9 8 3 8 8\\r\\n', 'output': ['45170585\\r\\n105647559\\r\\n680553097\\r\\n483815788\\r\\n105647559']}, {'input': '10 10\\r\\n0 1 0 0 1 1 1 1 1 1\\r\\n12 18 6 18 7 2 9 18 1 9\\r\\n', 'output': ['199115375\\r\\n823101465\\r\\n598679864\\r\\n797795239\\r\\n486469073\\r\\n424203836\\r\\n910672909\\r\\n823101465\\r\\n212101918\\r\\n910672909']}, {'input': '20 20\\r\\n1 1 1 1 0 1 1 1 0 1 0 1 0 0 1 0 1 1 0 1\\r\\n1 13 7 11 17 15 19 18 14 11 15 1 12 4 5 16 14 11 18 9\\r\\n', 'output': ['688505688\\r\\n964619120\\r\\n826562404\\r\\n585852097\\r\\n851622699\\r\\n345141790\\r\\n104431483\\r\\n414170148\\r\\n349014804\\r\\n585852097\\r\\n516550769\\r\\n688505688\\r\\n13942874\\r\\n670143860\\r\\n447795381\\r\\n684086734\\r\\n654880455\\r\\n585852097\\r\\n20914311\\r\\n207085074']}, {'input': '30 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\\r\\n1 2 1 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 2 2 1 1 2 2 2\\r\\n', 'output': ['346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n542025302\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n693292404\\r\\n693292404']}, {'input': '40 40\\r\\n1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n28 13 22 35 22 13 23 35 14 36 30 10 10 15 3 9 35 35 9 29 14 28 8 29 22 30 4 31 39 24 4 19 37 4 20 7 11 17 3 25\\r\\n', 'output': ['368107101\\r\\n848286965\\r\\n360530176\\r\\n210572788\\r\\n199380339\\r\\n848286965\\r\\n195418938\\r\\n210572788\\r\\n683175727\\r\\n45461550\\r\\n37884625\\r\\n544374860\\r\\n345376326\\r\\n518064489\\r\\n502910639\\r\\n510487564\\r\\n210572788\\r\\n210572788\\r\\n510487564\\r\\n202995863\\r\\n683175727\\r\\n526005255\\r\\n675598802\\r\\n202995863\\r\\n360530176\\r\\n37884625\\r\\n337799401\\r\\n871017740\\r\\n548372189\\r\\n30307700\\r\\n337799401\\r\\n855863890\\r\\n878594665\\r\\n337799401\\r\\n690752652\\r\\n840710040\\r\\n180265088\\r\\n187842013\\r\\n502910639\\r\\n863440815']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n13 18 27 40 3 1 20 11 25 11 2 31 22 15 36 12 11 24 8 39 31 36 19 24 10 39 27 4 10 22 14 3 25 5 24 19 20 33 17 19 30 15 37 33 3 27 26 29 37 34\\r\\n', 'output': ['30685719\\r\\n733580163\\r\\n601248068\\r\\n631933787\\r\\n621385537\\r\\n539876630\\r\\n815089070\\r\\n947421165\\r\\n519739161\\r\\n947421165\\r\\n81508907\\r\\n764265882\\r\\n896597977\\r\\n112194626\\r\\n468915973\\r\\n489053442\\r\\n947421165\\r\\n978106884\\r\\n326035628\\r\\n92057157\\r\\n764265882\\r\\n468915973\\r\\n275212440\\r\\n978106884\\r\\n407544535\\r\\n92057157\\r\\n601248068\\r\\n163017814\\r\\n407544535\\r\\n896597977\\r\\n570562349\\r\\n621385537\\r\\n519739161\\r\\n702894444\\r\\n978106884\\r\\n275212440\\r\\n815089070\\r\\n845774789\\r\\n193703533\\r\\n275212440\\r\\n224389252\\r\\n112194626\\r\\n10548250\\r\\n845774789\\r\\n621385537\\r\\n601248068\\r\\n61371438\\r\\n...']}, {'input': '50 50\\r\\n0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0\\r\\n2 50 37 21 21 2 26 49 15 44 8 27 30 28 26 40 26 45 41 37 27 34 8 35 2 23 2 49 13 1 39 37 12 42 7 11 4 50 42 21 27 50 28 31 17 22 10 43 46 13\\r\\n', 'output': ['380563607\\r\\n529890998\\r\\n551838435\\r\\n502062638\\r\\n635094670\\r\\n380563607\\r\\n954349479\\r\\n816391328\\r\\n358616170\\r\\n386444530\\r\\n907437062\\r\\n645509106\\r\\n717232340\\r\\n336668733\\r\\n954349479\\r\\n623561669\\r\\n954349479\\r\\n77604157\\r\\n314721296\\r\\n453480088\\r\\n645509106\\r\\n480115201\\r\\n907437062\\r\\n725742999\\r\\n380563607\\r\\n362831759\\r\\n725981442\\r\\n838731371\\r\\n976296916\\r\\n362990721\\r\\n932402042\\r\\n551838435\\r\\n286892936\\r\\n5880923\\r\\n832850448\\r\\n998164872\\r\\n761127214\\r\\n529890998\\r\\n5880923\\r\\n502062638\\r\\n645509106\\r\\n181137696\\r\\n181296658\\r\\n408391967\\r\\n739179777\\r\\n193222265\\r\\n904573682\\r...']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n1 2 2 1 2 2 2 1 1 1\\r\\n', 'output': ['665496237\\r\\n332748121\\r\\n332748121\\r\\n665496237\\r\\n332748121\\r\\n332748121\\r\\n332748121\\r\\n665496237\\r\\n665496237\\r\\n665496237']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 0 1 1\\r\\n2 1 2 2 1 1 1 1 1 1\\r\\n', 'output': ['771370640\\r\\n385685320\\r\\n771370640\\r\\n771370640\\r\\n385685320\\r\\n385685320\\r\\n385685320\\r\\n635246407\\r\\n385685320\\r\\n385685320']}, {'input': '10 10\\r\\n0 0 0 1 0 0 0 0 0 0\\r\\n2 2 2 2 2 2 2 1 2 2\\r\\n', 'output': ['973938381\\r\\n973938381\\r\\n973938381\\r\\n791643586\\r\\n973938381\\r\\n973938381\\r\\n973938381\\r\\n986091367\\r\\n973938381\\r\\n973938381']}, {'input': '10 10\\r\\n0 0 1 0 0 0 1 0 0 0\\r\\n2 1 2 1 1 2 1 1 1 1\\r\\n', 'output': ['44896189\\r\\n521570271\\r\\n482402083\\r\\n521570271\\r\\n521570271\\r\\n44896189\\r\\n740323218\\r\\n521570271\\r\\n521570271\\r\\n521570271']}, {'input': '10 10\\r\\n1 0 0 0 1 1 1 0 1 0\\r\\n1 2 1 2 1 1 2 2 2 1\\r\\n', 'output': ['910950063\\r\\n595918255\\r\\n797081304\\r\\n595918255\\r\\n910950063\\r\\n910950063\\r\\n823655773\\r\\n595918255\\r\\n823655773\\r\\n797081304']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n17 10 8 34 5 4 3 44 20 14\\r\\n', 'output': ['709444118\\r\\n6278277\\r\\n803618104\\r\\n420643883\\r\\n502261315\\r\\n401809052\\r\\n301356789\\r\\n426922160\\r\\n12556554\\r\\n408087329']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 1 0 1\\r\\n40 36 29 4 36 35 9 38 40 18\\r\\n', 'output': ['59109317\\r\\n951618303\\r\\n17898146\\r\\n105735367\\r\\n951618303\\r\\n675623373\\r\\n487465664\\r\\n505363810\\r\\n736385984\\r\\n974931328']}, {'input': '10 10\\r\\n0 0 0 0 0 0 0 1 0 0\\r\\n8 33 37 18 30 48 45 34 25 48\\r\\n', 'output': ['211347083\\r\\n497465085\\r\\n104016450\\r\\n725092025\\r\\n542990473\\r\\n269838145\\r\\n315363533\\r\\n227335634\\r\\n286118002\\r\\n269838145']}, {'input': '10 10\\r\\n0 0 1 0 0 0 0 0 1 0\\r\\n47 34 36 9 3 16 17 46 47 1\\r\\n', 'output': ['167709201\\r\\n57603825\\r\\n597597985\\r\\n690531016\\r\\n562925123\\r\\n673030499\\r\\n527924089\\r\\n312815611\\r\\n253346183\\r\\n853137943']}, {'input': '10 10\\r\\n1 0 0 1 1 0 1 0 0 1\\r\\n24 7 10 9 6 13 27 17 6 39\\r\\n', 'output': ['976715988\\r\\n573793375\\r\\n391885813\\r\\n865390672\\r\\n244178997\\r\\n209978251\\r\\n599683310\\r\\n965679188\\r\\n634429229\\r\\n89796951']}, {'input': '10 10\\r\\n0 0 0 0 0 1 0 0 0 0\\r\\n34 34 34 34 34 34 34 34 34 34\\r\\n', 'output': ['971203339\\r\\n971203339\\r\\n971203339\\r\\n971203339\\r\\n971203339\\r\\n754874965\\r\\n971203339\\r\\n971203339\\r\\n971203339\\r\\n971203339']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n43 43 43 43 43 43 43 43 43 43\\r\\n', 'output': ['44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44']}, {'input': '30 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 2 2 2 1 1 2 1 1 1 2 1 1 2 1 2 1 2 1 2 1 2 2 2 1 2 2 2 2 1\\r\\n', 'output': ['260411572\\r\\n520823144\\r\\n520823144\\r\\n520823144\\r\\n260411572\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n260411572\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n520823144\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n520823144\\r\\n520823144\\r\\n520823144\\r\\n260411572']}, {'input': '30 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1\\r\\n2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 2 1 2 1 2 1 1 1 1 2 1\\r\\n', 'output': ['720162001\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n720162001\\r\\n720162001\\r\\n720162001\\r\\n859203177\\r\\n720162001\\r\\n859203177\\r\\n720162001\\r\\n427819009\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n859203177']}, {'input': '30 30\\r\\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n2 1 1 2 1 2 2 2 2 2 1 1 2 2 2 1 2 2 2 1 2 1 1 1 1 1 2 1 1 1\\r\\n', 'output': ['188114875\\r\\n593179614\\r\\n593179614\\r\\n550614566\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n593179614\\r\\n593179614\\r\\n593179614\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n593179614\\r\\n593179614']}, {'input': '30 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\\r\\n1 1 1 1 2 1 2 2 1 2 1 2 1 1 2 2 1 2 1 2 1 2 2 2 1 1 2 1 2 2\\r\\n', 'output': ['593179614\\r\\n593179614\\r\\n593179614\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n275307283\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n275307283\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n188114875']}, {'input': '30 30\\r\\n1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 1 0 1 0\\r\\n1 1 1 2 2 1 2 1 2 1 1 2 2 2 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1\\r\\n', 'output': ['297674502\\r\\n297674502\\r\\n297674502\\r\\n101192689\\r\\n595349004\\r\\n549718521\\r\\n101192689\\r\\n297674502\\r\\n595349004\\r\\n297674502\\r\\n549718521\\r\\n101192689\\r\\n101192689\\r\\n101192689\\r\\n549718521\\r\\n595349004\\r\\n297674502\\r\\n549718521\\r\\n297674502\\r\\n549718521\\r\\n297674502\\r\\n101192689\\r\\n549718521\\r\\n595349004\\r\\n297674502\\r\\n101192689\\r\\n297674502\\r\\n101192689\\r\\n297674502\\r\\n549718521']}, {'input': '30 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n23 45 44 49 17 36 32 26 40 8 36 11 5 19 41 16 7 38 23 40 13 16 24 44 22 13 1 2 32 31\\r\\n', 'output': ['42365832\\r\\n603712812\\r\\n124449607\\r\\n524276926\\r\\n161519661\\r\\n283321379\\r\\n362757265\\r\\n481911094\\r\\n203885493\\r\\n839372581\\r\\n283321379\\r\\n280673490\\r\\n399827319\\r\\n121801718\\r\\n683148698\\r\\n680500809\\r\\n360109376\\r\\n243603436\\r\\n42365832\\r\\n203885493\\r\\n240955547\\r\\n680500809\\r\\n521629037\\r\\n124449607\\r\\n561346980\\r\\n240955547\\r\\n479263205\\r\\n958526410\\r\\n362757265\\r\\n881738413']}, {'input': '30 30\\r\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n41 39 15 34 45 27 18 7 48 33 46 11 24 16 35 43 7 31 26 17 30 15 5 9 29 20 21 37 3 7\\r\\n', 'output': ['61128841\\r\\n655563720\\r\\n98563838\\r\\n955457225\\r\\n295691514\\r\\n377063779\\r\\n916872088\\r\\n578393446\\r\\n115755411\\r\\n17191573\\r\\n235712813\\r\\n338478642\\r\\n556999882\\r\\n38585137\\r\\n895478524\\r\\n415648916\\r\\n578393446\\r\\n137148975\\r\\n437042480\\r\\n976850789\\r\\n197127676\\r\\n98563838\\r\\n698350848\\r\\n458436044\\r\\n257106377\\r\\n796914686\\r\\n736935985\\r\\n775521122\\r\\n818308250\\r\\n578393446']}, {'input': '30 30\\r\\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n29 38 18 19 46 28 12 5 46 17 31 20 24 33 9 6 47 2 2 41 34 2 50 5 47 10 40 21 49 28\\r\\n', 'output': ['528451192\\r\\n658031067\\r\\n259159750\\r\\n828137710\\r\\n218632982\\r\\n957717585\\r\\n838269402\\r\\n848401094\\r\\n218632982\\r\\n688426143\\r\\n942792071\\r\\n398871317\\r\\n678294451\\r\\n807874326\\r\\n129579875\\r\\n419134701\\r\\n787610942\\r\\n139711567\\r\\n139711567\\r\\n368476241\\r\\n378607933\\r\\n139711567\\r\\n498056116\\r\\n848401094\\r\\n787610942\\r\\n698557835\\r\\n797742634\\r\\n967849277\\r\\n927322509\\r\\n957717585']}, {'input': '30 30\\r\\n0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n1 12 9 1 5 32 38 25 34 31 27 43 13 38 48 40 5 42 20 45 1 4 35 38 1 44 31 42 8 37\\r\\n', 'output': ['399967190\\r\\n806628868\\r\\n604971651\\r\\n399967190\\r\\n3347244\\r\\n800038448\\r\\n225087925\\r\\n16736220\\r\\n621707871\\r\\n420050654\\r\\n816670600\\r\\n228435169\\r\\n208351705\\r\\n225087925\\r\\n231782413\\r\\n26777952\\r\\n3347244\\r\\n51806110\\r\\n13388976\\r\\n30125196\\r\\n399967190\\r\\n601624407\\r\\n23430708\\r\\n225087925\\r\\n399967190\\r\\n628402359\\r\\n420050654\\r\\n826712332\\r\\n205004461\\r\\n823365088']}, {'input': '30 30\\r\\n0 1 1 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0\\r\\n5 20 47 27 17 5 18 30 43 23 44 6 47 8 23 41 2 46 49 33 45 27 33 16 36 2 42 36 8 23\\r\\n', 'output': ['114252107\\r\\n760713694\\r\\n489959522\\r\\n18014766\\r\\n787754905\\r\\n689300600\\r\\n484993454\\r\\n142826188\\r\\n936763395\\r\\n126261951\\r\\n805769671\\r\\n827160720\\r\\n475023194\\r\\n781749983\\r\\n176049701\\r\\n138271795\\r\\n444998584\\r\\n252523902\\r\\n765679762\\r\\n354766165\\r\\n214239282\\r\\n727490181\\r\\n354766165\\r\\n565255613\\r\\n24019688\\r\\n275720240\\r\\n798903275\\r\\n969986908\\r\\n104636607\\r\\n126261951']}, {'input': '30 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\\r\\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\\r\\n', 'output': ['417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n142843895']}, {'input': '30 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\\r\\n', 'output': ['23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n2 1 1 2 2 1 2 1 1 2 2 2 1 2 2 1 1 1 2 1 2 1 2 2 2 1 2 1 1 2 2 2 2 2 1 2 2 2 2 2 2 1 2 1 2 2 2 1 1 2\\r\\n', 'output': ['714792256\\r\\n357396128\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n357396128\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n71479...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 1 1 2 1 1 1 1 1 2 1 1 1 2 2 2 1 1 1 1 2 2 1 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 1 1 2 2 2 1\\r\\n', 'output': ['964858256\\r\\n964858256\\r\\n964858256\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n931472159\\r\\n931472159\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n824636640\\r\\n931472159\\r\\n931472159\\r\\n964858256\\r\\n931472159\\r\\n964858256\\r\\n931472159\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n931472159\\r\\n964858256\\r\\n931472159\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n93147...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\\r\\n1 2 2 2 2 2 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 2 2 1 1 1 1 2 2 2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 2 2 1\\r\\n', 'output': ['512801870\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n512801870\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n512801870\\r\\n512801870\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n96131098\\r\\n27359387\\r\\n27359387\\r\\n5128...']}, {'input': '50 50\\r\\n0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\\r\\n2 1 1 1 1 2 2 2 1 1 2 2 2 1 2 1 2 2 2 1 1 1 1 2 2 1 1 1 1 2 1 2 2 2 2 1 1 1 2 1 2 1 1 2 2 1 1 2 2 1\\r\\n', 'output': ['303976482\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n480354901\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n303976482\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n151988241\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n15198...']}, {'input': '50 50\\r\\n0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 1 1 0 0 1 1 0 0 1 1 0 1 0 0 0 0\\r\\n1 1 1 1 1 2 2 1 1 2 2 2 1 1 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 1 1 2 2 1 1 2 1 1 2 2 2 2 2 2 2 2 2 1 2 1\\r\\n', 'output': ['525100120\\r\\n525100120\\r\\n392384920\\r\\n525100120\\r\\n525100120\\r\\n51955887\\r\\n784769840\\r\\n525100120\\r\\n392384920\\r\\n784769840\\r\\n784769840\\r\\n51955887\\r\\n392384920\\r\\n392384920\\r\\n525100120\\r\\n784769840\\r\\n784769840\\r\\n51955887\\r\\n392384920\\r\\n392384920\\r\\n392384920\\r\\n392384920\\r\\n784769840\\r\\n392384920\\r\\n525100120\\r\\n392384920\\r\\n51955887\\r\\n784769840\\r\\n525100120\\r\\n392384920\\r\\n525100120\\r\\n51955887\\r\\n51955887\\r\\n525100120\\r\\n392384920\\r\\n784769840\\r\\n525100120\\r\\n525100120\\r\\n784769840\\r\\n784769840\\r\\n51955887\\r\\n51955887\\r\\n784769840\\r\\n784769840\\r\\n51955887\\r\\n784769840\\r\\n51955887\\r\\n5251...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n32 22 24 45 22 17 10 5 27 1 48 15 14 43 11 16 38 31 24 19 5 28 2 4 34 29 18 32 47 11 2 34 39 29 36 11 39 24 23 16 41 45 17 39 30 15 16 3 3 8\\r\\n', 'output': ['118672439\\r\\n268758118\\r\\n837687594\\r\\n821980974\\r\\n268758118\\r\\n842923134\\r\\n848158674\\r\\n424079337\\r\\n692837455\\r\\n284464738\\r\\n677130835\\r\\n273993658\\r\\n987773273\\r\\n253051498\\r\\n134379059\\r\\n558458396\\r\\n827216514\\r\\n832452054\\r\\n837687594\\r\\n413608257\\r\\n424079337\\r\\n977302193\\r\\n568929476\\r\\n139614599\\r\\n687601915\\r\\n263522578\\r\\n129143519\\r\\n118672439\\r\\n392666097\\r\\n134379059\\r\\n568929476\\r\\n687601915\\r\\n113436899\\r\\n263522578\\r\\n258287038\\r\\n134379059\\r\\n113436899\\r\\n837687594\\r\\n553222856\\r\\n558458396\\r\\n682366375\\r\\n821980974\\r\\n842923134\\r\\n113436899\\r\\n547987316\\r\\n273993658\\r\\n55845...']}, {'input': '50 50\\r\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n49 34 4 15 32 20 22 35 3 28 15 46 4 46 16 11 45 42 11 4 15 36 29 10 27 32 1 1 23 11 6 34 35 19 11 5 2 37 9 20 39 33 27 4 21 33 6 23 37 50\\r\\n', 'output': ['41887747\\r\\n858571128\\r\\n101008368\\r\\n378781380\\r\\n808066944\\r\\n505041840\\r\\n555546024\\r\\n883823220\\r\\n75756276\\r\\n707058576\\r\\n378781380\\r\\n163351879\\r\\n101008368\\r\\n163351879\\r\\n404033472\\r\\n277773012\\r\\n138099787\\r\\n62343511\\r\\n277773012\\r\\n101008368\\r\\n378781380\\r\\n909075312\\r\\n732310668\\r\\n252520920\\r\\n681806484\\r\\n808066944\\r\\n25252092\\r\\n25252092\\r\\n580798116\\r\\n277773012\\r\\n151512552\\r\\n858571128\\r\\n883823220\\r\\n479789748\\r\\n277773012\\r\\n126260460\\r\\n50504184\\r\\n934327404\\r\\n227268828\\r\\n505041840\\r\\n984831588\\r\\n833319036\\r\\n681806484\\r\\n101008368\\r\\n530293932\\r\\n833319036\\r\\n151512552\\r\\n...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n12 29 36 24 44 22 38 43 30 19 15 2 39 8 13 50 29 18 37 19 32 39 42 41 20 11 14 25 4 35 14 23 17 29 1 19 3 6 8 31 26 46 9 31 36 49 21 38 17 27\\r\\n', 'output': ['820896192\\r\\n985588111\\r\\n466199870\\r\\n643548031\\r\\n15219645\\r\\n506731999\\r\\n603015902\\r\\n945055982\\r\\n986069299\\r\\n301507951\\r\\n27875887\\r\\n136816032\\r\\n671423918\\r\\n547264128\\r\\n889304208\\r\\n425667741\\r\\n985588111\\r\\n233099935\\r\\n534607886\\r\\n301507951\\r\\n192567806\\r\\n671423918\\r\\n876647966\\r\\n808239950\\r\\n369915967\\r\\n752488176\\r\\n957712224\\r\\n711956047\\r\\n273632064\\r\\n397791854\\r\\n957712224\\r\\n575140015\\r\\n164691919\\r\\n985588111\\r\\n68408016\\r\\n301507951\\r\\n205224048\\r\\n410448096\\r\\n547264128\\r\\n124159790\\r\\n780364063\\r\\n152035677\\r\\n615672144\\r\\n124159790\\r\\n466199870\\r\\n357259725\\r\\n43832398...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n25 31 26 45 2 6 25 14 35 23 31 16 24 36 44 8 18 41 36 3 27 21 15 44 45 45 25 8 3 43 7 25 48 45 44 33 25 49 8 46 14 12 12 46 45 43 29 40 1 47\\r\\n', 'output': ['26673909\\r\\n312584066\\r\\n906195896\\r\\n646959648\\r\\n760799621\\r\\n285910157\\r\\n26673909\\r\\n334375582\\r\\n835938955\\r\\n264118641\\r\\n312584066\\r\\n96930850\\r\\n145396275\\r\\n717216589\\r\\n765682014\\r\\n48465425\\r\\n857730471\\r\\n123604759\\r\\n717216589\\r\\n642077255\\r\\n787473530\\r\\n501563373\\r\\n215653216\\r\\n765682014\\r\\n646959648\\r\\n108381283\\r\\n26673909\\r\\n48465425\\r\\n642077255\\r\\n884404380\\r\\n167187791\\r\\n26673909\\r\\n290792550\\r\\n646959648\\r\\n765682014\\r\\n75139334\\r\\n614792020\\r\\n172070184\\r\\n48465425\\r\\n528237282\\r\\n334375582\\r\\n571820314\\r\\n571820314\\r\\n528237282\\r\\n646959648\\r\\n884404380\\r\\n550028798\\r\\n242...']}, {'input': '50 50\\r\\n0 0 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 1 1 0 0\\r\\n45 49 17 22 28 34 24 38 5 46 22 36 11 12 43 21 47 39 38 38 38 27 10 49 19 46 23 7 46 35 11 38 25 16 7 32 12 13 44 14 41 36 7 31 4 46 40 28 28 46\\r\\n', 'output': ['644620779\\r\\n102973792\\r\\n443172276\\r\\n267699221\\r\\n201448503\\r\\n886344552\\r\\n745782947\\r\\n99391617\\r\\n196964962\\r\\n259647944\\r\\n267699221\\r\\n619552244\\r\\n632971787\\r\\n371547745\\r\\n416322096\\r\\n28657358\\r\\n254279678\\r\\n338433480\\r\\n344697565\\r\\n344697565\\r\\n99391617\\r\\n464664183\\r\\n143249062\\r\\n102973792\\r\\n548817985\\r\\n15237815\\r\\n129823972\\r\\n675048688\\r\\n259647944\\r\\n380510381\\r\\n756520580\\r\\n344697565\\r\\n984824810\\r\\n829936749\\r\\n675048688\\r\\n658045869\\r\\n371547745\\r\\n112811160\\r\\n535398442\\r\\n599846428\\r\\n188023413\\r\\n619552244\\r\\n299923214\\r\\n44774351\\r\\n956167452\\r\\n259647944\\r\\n577475343\\r...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47\\r\\n', 'output': ['529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n988406960\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n52947...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\r\\n', 'output': ['9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9']}, {'input': '5 50\\r\\n1 1 1 1 1\\r\\n1 1 4 2 3\\r\\n', 'output': ['635246412\\r\\n635246412\\r\\n544496942\\r\\n272248471\\r\\n907494883']}, {'input': '10 50\\r\\n0 0 0 0 0 0 0 0 1 0\\r\\n3 1 3 3 1 3 1 2 2 1\\r\\n', 'output': ['187134581\\r\\n727874429\\r\\n187134581\\r\\n187134581\\r\\n727874429\\r\\n187134581\\r\\n727874429\\r\\n457504505\\r\\n124563167\\r\\n727874429']}, {'input': '20 50\\r\\n1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1\\r\\n1 2 2 1 2 2 2 2 2 2 1 1 2 2 2 1 1 1 2 2\\r\\n', 'output': ['853605709\\r\\n708967065\\r\\n708967065\\r\\n853605709\\r\\n708967065\\r\\n708967065\\r\\n708967065\\r\\n922030188\\r\\n708967065\\r\\n922030188\\r\\n853605709\\r\\n853605709\\r\\n708967065\\r\\n922030188\\r\\n708967065\\r\\n461015094\\r\\n853605709\\r\\n853605709\\r\\n708967065\\r\\n708967065']}, {'input': '20 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 2 2 2 2 2 2 1 2 1 2 1 2 1 1 2 1 2 2 1\\r\\n', 'output': ['436731907\\r\\n873463814\\r\\n873463814\\r\\n873463814\\r\\n873463814\\r\\n873463814\\r\\n873463814\\r\\n436731907\\r\\n873463814\\r\\n436731907\\r\\n873463814\\r\\n436731907\\r\\n873463814\\r\\n436731907\\r\\n436731907\\r\\n873463814\\r\\n436731907\\r\\n873463814\\r\\n873463814\\r\\n436731907']}, {'input': '40 50\\r\\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\\r\\n33 26 4 19 42 43 19 32 13 23 19 1 18 43 43 43 19 31 4 25 28 23 33 37 36 23 5 12 18 32 34 1 21 22 34 35 37 16 41 39\\r\\n', 'output': ['729284231\\r\\n60340485\\r\\n239647233\\r\\n389641092\\r\\n20685064\\r\\n829280137\\r\\n389641092\\r\\n918933511\\r\\n529292419\\r\\n629288325\\r\\n366487398\\r\\n808595073\\r\\n579290372\\r\\n829280137\\r\\n829280137\\r\\n41331201\\r\\n389641092\\r\\n110338438\\r\\n239647233\\r\\n249989765\\r\\n679286278\\r\\n629288325\\r\\n426374038\\r\\n968931464\\r\\n160336391\\r\\n629288325\\r\\n49997953\\r\\n718941699\\r\\n579290372\\r\\n918933511\\r\\n539634951\\r\\n808595073\\r\\n89829960\\r\\n818937605\\r\\n539634951\\r\\n349985671\\r\\n968931464\\r\\n958588932\\r\\n210334344\\r\\n589632904']}, {'input': '41 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n1 2 4 2 3 2 4 3 1 1 3 1 3 2 5 3 3 5 4 4 1 1 2 3 2 1 5 5 5 4 2 2 2 1 2 4 4 5 2 1 4\\r\\n', 'output': ['394710173\\r\\n789420346\\r\\n580596339\\r\\n789420346\\r\\n185886166\\r\\n789420346\\r\\n580596339\\r\\n185886166\\r\\n394710173\\r\\n394710173\\r\\n185886166\\r\\n394710173\\r\\n581788048\\r\\n789420346\\r\\n636898629\\r\\n185886166\\r\\n185886166\\r\\n975306512\\r\\n580596339\\r\\n580596339\\r\\n394710173\\r\\n394710173\\r\\n55110581\\r\\n185886166\\r\\n55110581\\r\\n394710173\\r\\n975306512\\r\\n975306512\\r\\n975306512\\r\\n580596339\\r\\n789420346\\r\\n789420346\\r\\n789420346\\r\\n394710173\\r\\n789420346\\r\\n580596339\\r\\n580596339\\r\\n975306512\\r\\n789420346\\r\\n394710173\\r\\n580596339']}, {'input': '42 50\\r\\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0\\r\\n2 4 6 8 1 3 6 1 4 1 3 4 3 7 6 6 8 7 4 1 7 4 6 9 3 1 9 7 1 2 9 3 1 6 1 5 1 8 2 6 8 8\\r\\n', 'output': ['11284873\\r\\n329090227\\r\\n33854619\\r\\n45139492\\r\\n504764613\\r\\n995500935\\r\\n33854619\\r\\n504764613\\r\\n22569746\\r\\n504764613\\r\\n516049486\\r\\n22569746\\r\\n516049486\\r\\n538619232\\r\\n33854619\\r\\n33854619\\r\\n45139492\\r\\n538619232\\r\\n22569746\\r\\n504764613\\r\\n538619232\\r\\n22569746\\r\\n33854619\\r\\n549904105\\r\\n516049486\\r\\n504764613\\r\\n549904105\\r\\n538619232\\r\\n504764613\\r\\n11284873\\r\\n990014099\\r\\n516049486\\r\\n504764613\\r\\n33854619\\r\\n504764613\\r\\n527334359\\r\\n504764613\\r\\n45139492\\r\\n663667290\\r\\n33854619\\r\\n45139492\\r\\n45139492']}, {'input': '43 50\\r\\n1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n13 7 13 15 8 9 11 1 15 9 3 7 3 15 4 7 7 16 9 13 12 16 16 1 5 5 14 5 17 2 1 13 4 13 10 17 17 6 11 15 14 3 6\\r\\n', 'output': ['175780254\\r\\n94650906\\r\\n163530008\\r\\n802992688\\r\\n561362014\\r\\n881093354\\r\\n522311681\\r\\n319731340\\r\\n802992688\\r\\n881093354\\r\\n959194020\\r\\n241630674\\r\\n959194020\\r\\n802992688\\r\\n280681007\\r\\n241630674\\r\\n241630674\\r\\n124479675\\r\\n881093354\\r\\n163530008\\r\\n842043021\\r\\n124479675\\r\\n124479675\\r\\n13521558\\r\\n600412347\\r\\n600412347\\r\\n483261348\\r\\n67607790\\r\\n444211015\\r\\n639462680\\r\\n319731340\\r\\n163530008\\r\\n280681007\\r\\n163530008\\r\\n202580341\\r\\n444211015\\r\\n444211015\\r\\n920143687\\r\\n522311681\\r\\n802992688\\r\\n483261348\\r\\n959194020\\r\\n920143687']}, {'input': '44 50\\r\\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\\r\\n2 6 6 11 2 4 11 10 5 15 15 20 20 7 9 8 17 4 16 19 12 16 12 13 2 11 20 2 6 10 2 18 7 5 18 10 15 6 11 9 7 5 17 11\\r\\n', 'output': ['327775237\\r\\n983325711\\r\\n983325711\\r\\n305397274\\r\\n327775237\\r\\n853173373\\r\\n305397274\\r\\n640631832\\r\\n320315916\\r\\n960947748\\r\\n960947748\\r\\n272889453\\r\\n283019311\\r\\n648091153\\r\\n975866390\\r\\n312856595\\r\\n290478632\\r\\n655550474\\r\\n625713190\\r\\n618253869\\r\\n968407069\\r\\n625713190\\r\\n968407069\\r\\n633172511\\r\\n327775237\\r\\n305397274\\r\\n283019311\\r\\n327775237\\r\\n983325711\\r\\n640631832\\r\\n327775237\\r\\n953488427\\r\\n648091153\\r\\n816905628\\r\\n953488427\\r\\n640631832\\r\\n960947748\\r\\n983325711\\r\\n305397274\\r\\n975866390\\r\\n648091153\\r\\n320315916\\r\\n290478632\\r\\n305397274']}, {'input': '45 50\\r\\n0 1 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0\\r\\n4 4 23 23 13 23 9 16 4 18 20 15 21 24 22 20 22 1 15 7 10 17 20 6 15 7 4 10 16 7 14 9 13 17 10 14 22 23 3 5 20 11 4 24 24\\r\\n', 'output': ['630266647\\r\\n555616275\\r\\n379739073\\r\\n948743787\\r\\n301438985\\r\\n948743787\\r\\n669416691\\r\\n225976394\\r\\n555616275\\r\\n340589029\\r\\n156600176\\r\\n835755590\\r\\n563727926\\r\\n786866823\\r\\n560278630\\r\\n781592669\\r\\n970855676\\r\\n388465157\\r\\n835755590\\r\\n853405544\\r\\n889918511\\r\\n614441551\\r\\n156600176\\r\\n446277794\\r\\n117450132\\r\\n853405544\\r\\n630266647\\r\\n78300088\\r\\n225976394\\r\\n722767393\\r\\n708566735\\r\\n669416691\\r\\n58825276\\r\\n931705632\\r\\n78300088\\r\\n708566735\\r\\n970855676\\r\\n948743787\\r\\n223138897\\r\\n39150044\\r\\n781592669\\r\\n280139315\\r\\n555616275\\r\\n338964591\\r\\n786866823']}, {'input': '46 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n29 22 30 33 13 31 19 11 12 21 5 4 24 21 20 6 28 16 27 18 21 11 3 24 21 8 8 33 24 7 34 12 13 32 26 33 33 22 18 2 3 7 24 17 9 30\\r\\n', 'output': ['265429165\\r\\n98093399\\r\\n859759619\\r\\n646262275\\r\\n738585431\\r\\n455845720\\r\\n311590743\\r\\n548168876\\r\\n144254977\\r\\n502007298\\r\\n975163564\\r\\n380833110\\r\\n288509954\\r\\n502007298\\r\\n905921197\\r\\n571249665\\r\\n669343064\\r\\n525088087\\r\\n75012610\\r\\n715504642\\r\\n502007298\\r\\n548168876\\r\\n784747009\\r\\n288509954\\r\\n502007298\\r\\n761666220\\r\\n761666220\\r\\n646262275\\r\\n288509954\\r\\n167335766\\r\\n242348376\\r\\n144254977\\r\\n738585431\\r\\n51931821\\r\\n478926509\\r\\n646262275\\r\\n646262275\\r\\n98093399\\r\\n715504642\\r\\n190416555\\r\\n784747009\\r\\n167335766\\r\\n288509954\\r\\n121174188\\r\\n357752321\\r\\n859759619']}, {'input': '47 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n30 32 21 7 15 4 39 36 23 17 13 4 8 18 38 24 13 27 37 27 32 16 8 12 7 23 28 38 11 36 19 33 10 34 4 8 5 22 3 29 21 30 7 32 35 26 23\\r\\n', 'output': ['243227082\\r\\n658739962\\r\\n369907828\\r\\n456050727\\r\\n121613541\\r\\n831025760\\r\\n116546336\\r\\n491521369\\r\\n785420708\\r\\n537126421\\r\\n704345014\\r\\n831025760\\r\\n663807167\\r\\n744882861\\r\\n907034249\\r\\n993177148\\r\\n704345014\\r\\n618202115\\r\\n699277809\\r\\n618202115\\r\\n658739962\\r\\n329369981\\r\\n663807167\\r\\n496588574\\r\\n456050727\\r\\n785420708\\r\\n825958555\\r\\n907034249\\r\\n288832134\\r\\n491521369\\r\\n952639301\\r\\n866496402\\r\\n81075694\\r\\n76008489\\r\\n831025760\\r\\n663807167\\r\\n40537847\\r\\n577664268\\r\\n623269320\\r\\n35470642\\r\\n369907828\\r\\n243227082\\r\\n456050727\\r\\n658739962\\r\\n283764929\\r\\n410445675\\r\\n785420708...']}, {'input': '48 50\\r\\n1 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1\\r\\n9 42 15 12 2 9 41 13 23 14 17 42 25 10 10 2 38 36 41 31 9 20 31 41 20 41 40 28 7 37 14 25 23 38 27 17 6 40 2 19 19 3 8 32 13 22 41 20\\r\\n', 'output': ['386033769\\r\\n373559702\\r\\n643389615\\r\\n677156688\\r\\n85785282\\r\\n507867516\\r\\n317129978\\r\\n557604333\\r\\n299639299\\r\\n790016136\\r\\n959305308\\r\\n803246569\\r\\n74071672\\r\\n564297240\\r\\n564297240\\r\\n112859448\\r\\n631676005\\r\\n34981358\\r\\n760353928\\r\\n751077091\\r\\n386033769\\r\\n130350127\\r\\n751077091\\r\\n760353928\\r\\n130350127\\r\\n760353928\\r\\n717461287\\r\\n581787919\\r\\n395008068\\r\\n91411082\\r\\n790016136\\r\\n412498747\\r\\n299639299\\r\\n631676005\\r\\n159856954\\r\\n959305308\\r\\n338578344\\r\\n717461287\\r\\n112859448\\r\\n814960179\\r\\n73920403\\r\\n169289172\\r\\n451437792\\r\\n807506815\\r\\n733586412\\r\\n243209575\\r\\n317129978\\r...']}, {'input': '49 50\\r\\n0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0\\r\\n2 3 2 3 4 2 1 1 1 1 1 1 3 1 2 3 2 4 1 2 2 1 1 2 4 3 2 4 1 2 1 1 2 3 1 3 3 2 2 1 4 3 4 1 3 3 4 1 3\\r\\n', 'output': ['136570933\\r\\n703978576\\r\\n136570933\\r\\n703978576\\r\\n273141866\\r\\n136570933\\r\\n567407643\\r\\n478951804\\r\\n567407643\\r\\n567407643\\r\\n478951804\\r\\n478951804\\r\\n703978576\\r\\n567407643\\r\\n136570933\\r\\n703978576\\r\\n136570933\\r\\n273141866\\r\\n567407643\\r\\n136570933\\r\\n136570933\\r\\n567407643\\r\\n567407643\\r\\n136570933\\r\\n273141866\\r\\n703978576\\r\\n957903608\\r\\n273141866\\r\\n567407643\\r\\n136570933\\r\\n567407643\\r\\n567407643\\r\\n136570933\\r\\n703978576\\r\\n567407643\\r\\n438611059\\r\\n438611059\\r\\n136570933\\r\\n136570933\\r\\n478951804\\r\\n273141866\\r\\n703978576\\r\\n917562863\\r\\n478951804\\r\\n703978576\\r\\n703978576\\r\\n27314...']}, {'input': '50 50\\r\\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\\r\\n1 9 24 8 8 11 21 11 8 5 16 32 31 15 29 14 16 20 5 18 5 10 31 23 21 4 4 20 20 11 1 4 4 15 9 14 5 30 13 16 32 27 19 10 19 24 21 1 21 15\\r\\n', 'output': ['475420905\\r\\n285810733\\r\\n429413837\\r\\n935878068\\r\\n808634181\\r\\n787710167\\r\\n1395475\\r\\n787710167\\r\\n808634181\\r\\n85801616\\r\\n619024009\\r\\n748779213\\r\\n762627113\\r\\n143603104\\r\\n896947114\\r\\n666426552\\r\\n619024009\\r\\n343206464\\r\\n380615819\\r\\n571621466\\r\\n380615819\\r\\n171603232\\r\\n132672278\\r\\n952237285\\r\\n1395475\\r\\n467939034\\r\\n467939034\\r\\n524218923\\r\\n343206464\\r\\n238408190\\r\\n616106935\\r\\n467939034\\r\\n467939034\\r\\n143603104\\r\\n285810733\\r\\n639542266\\r\\n85801616\\r\\n514809696\\r\\n23435331\\r\\n619024009\\r\\n748779213\\r\\n662977597\\r\\n725343882\\r\\n761231638\\r\\n48798018\\r\\n429413837\\r\\n959313399\\r\\n61...']}, {'input': '47 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\\r\\n', 'output': ['573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n57345...']}, {'input': '48 50\\r\\n1 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1\\r\\n42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42\\r\\n', 'output': ['612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n27123...']}, {'input': '49 50\\r\\n0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0\\r\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\r\\n', 'output': ['371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n37100...']}, {'input': '50 50\\r\\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\\r\\n33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33\\r\\n', 'output': ['677141055\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141055\\r\\n67714...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n982795629\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n83495...']}, {'input': '50 50\\r\\n1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 1 1 0 0 1 1 0 0 1 0 0 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306346\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306346\\r\\n996306346\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n99630...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n70582...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\\r\\n', 'output': ['382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n798399400\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n38299...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\\r\\n', 'output': ['459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n533798960\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n45908...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n', 'output': ['311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n273616393\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n31116...']}, {'input': '50 50\\r\\n0 0 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 1 1 0 0\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n', 'output': ['123180764\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n12318...']}, {'input': '50 50\\r\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n', 'output': ['80661140\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n', 'output': ['51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51']}, {'input': '5 5\\r\\n0 1 0 0 1\\r\\n2 4 1 2 1\\r\\n', 'output': ['665717847\\r\\n333191345\\r\\n831981100\\r\\n665717847\\r\\n831981101']}, {'input': '20 20\\r\\n0 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 0\\r\\n109 1 24 122 136 42 25 112 110 15 26 48 35 10 86 13 41 6 24 15\\r\\n', 'output': ['217595927\\r\\n149660176\\r\\n322657182\\r\\n290143118\\r\\n388896876\\r\\n296261274\\r\\n86540143\\r\\n507489163\\r\\n979723241\\r\\n248413934\\r\\n896431517\\r\\n195977977\\r\\n246884395\\r\\n633562669\\r\\n891842900\\r\\n947337935\\r\\n146601098\\r\\n897961056\\r\\n597111165\\r\\n451221827']}, {'input': '100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n2360379 9167688 488710 6896065 5243867 11762954 673012 1669264 265550 10921726 9383074 9523863 13429215 3223202 5372988 8197773 13052301 6045370 18630475 23534272 14923100 17181531 1112172 24623774 16991041 2363652 10720874 7171147 1261895 13127315 454592 1510882 12229327 15445105 15722482 5467131 92...', 'output': ['19790585\\r\\n929149870\\r\\n158142558\\r\\n415179791\\r\\n770973301\\r\\n197788614\\r\\n662208363\\r\\n968610058\\r\\n711622366\\r\\n89060603\\r\\n49510939\\r\\n593110743\\r\\n227455934\\r\\n197704062\\r\\n89005665\\r\\n237287745\\r\\n266986632\\r\\n365753331\\r\\n365877936\\r\\n464762563\\r\\n879788817\\r\\n148424226\\r\\n355820880\\r\\n830466826\\r\\n583301068\\r\\n553505420\\r\\n59407792\\r\\n988431747\\r\\n889537165\\r\\n425125094\\r\\n978481639\\r\\n494195332\\r\\n98957157\\r\\n850143163\\r\\n474568826\\r\\n889578801\\r\\n691943729\\r\\n751249179\\r\\n29723781\\r\\n385464681\\r\\n494219413\\r\\n968727719\\r\\n622687463\\r\\n929103141\\r\\n89090024\\r\\n563393484\\r\\n29714966\\r\\n484...']}, {'input': '1000 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['652684471\\r\\n652684471\\r\\n959809060\\r\\n652684471\\r\\n307124589\\r\\n652684471\\r\\n652684471\\r\\n614249178\\r\\n307124589\\r\\n307124589\\r\\n307124589\\r\\n959809060\\r\\n652684471\\r\\n652684471\\r\\n959809060\\r\\n307124589\\r\\n307124589\\r\\n614249178\\r\\n652684471\\r\\n307124589\\r\\n652684471\\r\\n307124589\\r\\n307124589\\r\\n652684471\\r\\n268689296\\r\\n307124589\\r\\n959809060\\r\\n652684471\\r\\n307124589\\r\\n652684471\\r\\n614249178\\r\\n959809060\\r\\n652684471\\r\\n652684471\\r\\n307124589\\r\\n614249178\\r\\n307124589\\r\\n652684471\\r\\n652684471\\r\\n959809060\\r\\n307124589\\r\\n959809060\\r\\n307124589\\r\\n307124589\\r\\n959809060\\r\\n307124589\\r\\n95980...']}, {'input': '50000 1000\\r\\n1 0 0 1 0 0 0 1 1 1 0 1 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 0 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 0 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 0 1 0 0 1 0 0 1 0 1 1 0 1 0 0 0 1 1 0 1 0 1 1 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0...', 'output': ['512182090\\r\\n641172382\\r\\n697325018\\r\\n818311552\\r\\n590906119\\r\\n461103680\\r\\n370418391\\r\\n653972733\\r\\n766040380\\r\\n237657896\\r\\n893425807\\r\\n807372188\\r\\n964959592\\r\\n319396135\\r\\n111079234\\r\\n137994713\\r\\n9663504\\r\\n92358638\\r\\n965938119\\r\\n98687680\\r\\n675026792\\r\\n279244742\\r\\n15543727\\r\\n479206408\\r\\n519670811\\r\\n684652624\\r\\n777078382\\r\\n554151828\\r\\n865485075\\r\\n937290032\\r\\n565154228\\r\\n221807985\\r\\n218937300\\r\\n112386612\\r\\n310142313\\r\\n986922988\\r\\n267227503\\r\\n40988675\\r\\n369434552\\r\\n763776107\\r\\n694666611\\r\\n182771968\\r\\n494768207\\r\\n633944759\\r\\n635638470\\r\\n761724538\\r\\n162219074\\r\\n...']}, {'input': '200000 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['967977965\\r\\n983111159\\r\\n952844771\\r\\n937711577\\r\\n937711577\\r\\n771246443\\r\\n483715757\\r\\n892311995\\r\\n967977965\\r\\n801512831\\r\\n846912413\\r\\n831779219\\r\\n967977965\\r\\n786379637\\r\\n892311995\\r\\n604781309\\r\\n710713667\\r\\n952844771\\r\\n952844771\\r\\n937711577\\r\\n874943312\\r\\n120519101\\r\\n892311995\\r\\n589648115\\r\\n619914503\\r\\n665314085\\r\\n374637533\\r\\n892311995\\r\\n937711577\\r\\n892311995\\r\\n650180891\\r\\n771246443\\r\\n922578383\\r\\n877178801\\r\\n483715757\\r\\n892311995\\r\\n952844771\\r\\n619914503\\r\\n574514921\\r\\n62834123\\r\\n907445189\\r\\n816646025\\r\\n846912413\\r\\n816646025\\r\\n937711577\\r\\n756113249\\r\\n846912...']}, {'input': '200000 3000\\r\\n0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 0 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 1 0 1 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 0 1 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 ...', 'output': ['568390992\\r\\n182388528\\r\\n352385861\\r\\n315979953\\r\\n743372559\\r\\n632628120\\r\\n995395434\\r\\n506334569\\r\\n667771666\\r\\n453192833\\r\\n680429762\\r\\n407446046\\r\\n471154985\\r\\n147648615\\r\\n936047905\\r\\n830053040\\r\\n251214636\\r\\n602162072\\r\\n263562703\\r\\n990790012\\r\\n150217484\\r\\n82075059\\r\\n932318671\\r\\n687474214\\r\\n345881774\\r\\n771937952\\r\\n356541287\\r\\n15233024\\r\\n811478946\\r\\n737405100\\r\\n892805310\\r\\n176354033\\r\\n997083988\\r\\n281716722\\r\\n628262667\\r\\n556117647\\r\\n359954433\\r\\n926451677\\r\\n992018326\\r\\n134736321\\r\\n139309832\\r\\n510415929\\r\\n125029199\\r\\n222157092\\r\\n859462710\\r\\n16077301\\r\\n83159806...']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 1 3 2 1 3 2 1 1 2 1 1 2 2 4 2 1 5 2 3\\r\\n', 'output': ['249561090\\r\\n249561090\\r\\n748683270\\r\\n499122180\\r\\n249561090\\r\\n748683270\\r\\n499122180\\r\\n249561090\\r\\n249561090\\r\\n499122180\\r\\n249561090\\r\\n249561090\\r\\n499122180\\r\\n499122180\\r\\n7\\r\\n499122180\\r\\n249561090\\r\\n249561097\\r\\n499122180\\r\\n748683270']}, {'input': '20 30\\r\\n1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 2 1 3 1 4 1 5 1 1 2 3 1 1 3 3 2 2 1 2\\r\\n', 'output': ['902255482\\r\\n806266611\\r\\n902255482\\r\\n710277740\\r\\n902255482\\r\\n537377994\\r\\n902255482\\r\\n518299998\\r\\n902255482\\r\\n902255482\\r\\n806266611\\r\\n710277740\\r\\n902255482\\r\\n902255482\\r\\n710277740\\r\\n710277740\\r\\n806266611\\r\\n806266611\\r\\n902255482\\r\\n806266611']}, {'input': '20 30\\r\\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\\r\\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 2\\r\\n', 'output': ['441078046\\r\\n920852179\\r\\n479774133\\r\\n959548266\\r\\n479774133\\r\\n479774133\\r\\n479774133\\r\\n959548266\\r\\n402381959\\r\\n263018694\\r\\n479774133\\r\\n959548266\\r\\n441078046\\r\\n479774133\\r\\n479774133\\r\\n959548266\\r\\n441078046\\r\\n959548266\\r\\n479774133\\r\\n959548266']}, {'input': '20 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\\r\\n1 1 3 2 3 1 2 2 3 2 2 2 2 2 2 3 3 1 1 2\\r\\n', 'output': ['550803098\\r\\n550803098\\r\\n654164941\\r\\n103361843\\r\\n654164941\\r\\n550803098\\r\\n103361843\\r\\n103361843\\r\\n654164941\\r\\n103361843\\r\\n103361843\\r\\n103361843\\r\\n103361843\\r\\n103361843\\r\\n276551708\\r\\n654164941\\r\\n654164941\\r\\n138275854\\r\\n550803098\\r\\n103361843']}, {'input': '20 30\\r\\n0 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1\\r\\n1 2 2 2 2 2 1 1 2 1 4 1 2 5 3 4 1 1 2 1\\r\\n', 'output': ['297511613\\r\\n595023226\\r\\n756311680\\r\\n756311680\\r\\n756311680\\r\\n595023226\\r\\n297511613\\r\\n378155840\\r\\n595023226\\r\\n297511613\\r\\n514379007\\r\\n297511613\\r\\n595023226\\r\\n892534847\\r\\n136223167\\r\\n514379007\\r\\n378155840\\r\\n297511613\\r\\n595023226\\r\\n378155840']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n765 451 7275 385 1686 78 554 114 1980 394 776 232 627 760 782 7 486 32 1100 1516\\r\\n', 'output': ['491636110\\r\\n498623506\\r\\n486651408\\r\\n182179980\\r\\n6989399\\r\\n10980766\\r\\n871467875\\r\\n92836839\\r\\n509106603\\r\\n951327263\\r\\n211628580\\r\\n83852758\\r\\n11480438\\r\\n618912260\\r\\n58897200\\r\\n820057743\\r\\n605934809\\r\\n183676993\\r\\n948333237\\r\\n341401087']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\\r\\n779 1317 1275 234 857 1531 785 265 679 767 1994 11 918 1146 1807 71 813 245 3926 580\\r\\n', 'output': ['552990868\\r\\n90431251\\r\\n712871250\\r\\n952916426\\r\\n537881559\\r\\n151361542\\r\\n321464532\\r\\n89445141\\r\\n86037605\\r\\n17799187\\r\\n586392419\\r\\n241031286\\r\\n40642277\\r\\n699465709\\r\\n481837969\\r\\n920500985\\r\\n572000768\\r\\n195703359\\r\\n903238702\\r\\n911489090']}, {'input': '20 30\\r\\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n128 574 205 490 611 1294 283 1690 1466 1896 272 19 1020 5032 357 1500 36 1749 1202 176\\r\\n', 'output': ['389864218\\r\\n157345415\\r\\n537589523\\r\\n962131647\\r\\n753565149\\r\\n104281847\\r\\n378440811\\r\\n873692367\\r\\n690552162\\r\\n658861420\\r\\n578900375\\r\\n198248582\\r\\n923070965\\r\\n228091231\\r\\n572635926\\r\\n887695253\\r\\n795942304\\r\\n70748620\\r\\n510359933\\r\\n785624388']}, {'input': '20 30\\r\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\\r\\n61 849 320 1007 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 62 2521\\r\\n', 'output': ['514012356\\r\\n393871659\\r\\n166092575\\r\\n569465276\\r\\n74319433\\r\\n306884170\\r\\n254628439\\r\\n656312237\\r\\n485609669\\r\\n216694535\\r\\n825782618\\r\\n110704962\\r\\n294216114\\r\\n131255421\\r\\n733108087\\r\\n613768340\\r\\n14181299\\r\\n610566194\\r\\n624888021\\r\\n887363731']}, {'input': '20 30\\r\\n0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0\\r\\n244 1901 938 1350 1010 763 318 2158 1645 534 1356 563 295 1449 2306 224 1302 195 639 810\\r\\n', 'output': ['300071414\\r\\n595185476\\r\\n40756239\\r\\n113904636\\r\\n440148868\\r\\n947268885\\r\\n456535325\\r\\n542868956\\r\\n183161324\\r\\n427608407\\r\\n61171180\\r\\n375813928\\r\\n43680359\\r\\n55509680\\r\\n30410255\\r\\n360521133\\r\\n535772284\\r\\n722568686\\r\\n663107799\\r\\n390646234']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n126679203 179924771 16639504 67055540 14134870 36407782 15024189 39367944 121531542 5400023 5834434 8539193 3686913 11287136 36370086 71808281 138206490 59846864 19052959 21446598\\r\\n', 'output': ['615913610\\r\\n488825486\\r\\n773371096\\r\\n742795989\\r\\n193664548\\r\\n323188752\\r\\n32686082\\r\\n709701410\\r\\n293733249\\r\\n161181348\\r\\n193396792\\r\\n354491196\\r\\n708550409\\r\\n644392716\\r\\n323187536\\r\\n646345011\\r\\n487479735\\r\\n1930544\\r\\n322628919\\r\\n966734748']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\\r\\n144831196 28660251 62050800 52660762 23189000 12771861 73096012 25119113 119648684 16011144 51600638 74708999 6312006 26945863 68746869 58112898 5070 19157938 74351320 60263898\\r\\n', 'output': ['132556548\\r\\n711988928\\r\\n6999755\\r\\n208709864\\r\\n320161276\\r\\n865416376\\r\\n320896979\\r\\n458941660\\r\\n671806481\\r\\n158009043\\r\\n351362956\\r\\n78248147\\r\\n927871852\\r\\n882014191\\r\\n988190329\\r\\n830735503\\r\\n1958329\\r\\n787106839\\r\\n942059547\\r\\n341315444']}, {'input': '20 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\\r\\n34095514 37349809 60555988 40280455 19504485 77297461 41415742 66290058 20631093 185280391 7151718 64927972 15611855 4317891 24600598 24588269 60808977 9108470 13217752 191209824\\r\\n', 'output': ['313283482\\r\\n21804622\\r\\n682197550\\r\\n361027027\\r\\n756362680\\r\\n151917509\\r\\n716108102\\r\\n131732975\\r\\n237068086\\r\\n731869119\\r\\n190595295\\r\\n847684643\\r\\n847454143\\r\\n501579235\\r\\n129856516\\r\\n246699402\\r\\n205385635\\r\\n639100445\\r\\n614421017\\r\\n227076269']}, {'input': '20 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0\\r\\n9380933 34450681 12329733 7732927 73910078 16165679 149467043 56914401 21809098 36934833 71019254 168559440 12033996 40465391 7156881 3312348 37150678 130625432 42709585 66115911\\r\\n', 'output': ['813231583\\r\\n458087744\\r\\n445793615\\r\\n651101155\\r\\n484645642\\r\\n506668954\\r\\n896602699\\r\\n556862659\\r\\n145127201\\r\\n302005399\\r\\n558418033\\r\\n213871822\\r\\n57299634\\r\\n564466143\\r\\n767349204\\r\\n290138481\\r\\n12657688\\r\\n925337836\\r\\n827843024\\r\\n119362169']}, {'input': '20 30\\r\\n0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1\\r\\n66166717 200301718 6725634 95379617 42880832 48874211 64912554 36809296 13248978 58406666 53142218 45080678 19902257 58554006 23570140 14484661 7589423 78746789 11072716 52395211\\r\\n', 'output': ['823107880\\r\\n742699237\\r\\n987770596\\r\\n549924308\\r\\n730188349\\r\\n913535291\\r\\n936423447\\r\\n122869154\\r\\n581668441\\r\\n749452306\\r\\n615454312\\r\\n176148736\\r\\n874336841\\r\\n897418997\\r\\n235568492\\r\\n24727530\\r\\n143875067\\r\\n15270097\\r\\n200154604\\r\\n356406452']}, {'input': '20 30\\r\\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661\\r\\n', 'output': ['76898501\\r\\n989279651\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803\\r\\n', 'output': ['504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981']}, {'input': '2000 300\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1...', 'output': ['527557309\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n819771096\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n762900831\\r\\n762900831\\r\\n762900831\\r\\n292213787\\r\\n762900831\\r\\n527557309\\r\\n292213787\\r\\n762900831\\r\\n292213787\\r\\n527557309\\r\\n762900831\\r\\n292213787\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n819771096\\r\\n527557309\\r\\n527557309\\r\\n762900831\\r\\n292213787\\r\\n762900831\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n762900831\\r\\n762900831\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n76290...', '126026410\\r\\n26532090\\r\\n89545496\\r\\n348227668\\r\\n407921745\\r\\n822476105\\r\\n815841057\\r\\n129343473\\r\\n683184486\\r\\n182403525\\r\\n971714643\\r\\n669922973\\r\\n195669656\\r\\n643389211\\r\\n596958847\\r\\n991612114\\r\\n26531426\\r\\n494147799\\r\\n587007825\\r\\n646703323\\r\\n192353616\\r\\n198987665\\r\\n116075186\\r\\n208935334\\r\\n451035127\\r\\n991612774\\r\\n630129722\\r\\n673238446\\r\\n965081504\\r\\n404604334\\r\\n762781111\\r\\n945182265\\r\\n613540647\\r\\n855640163\\r\\n540577710\\r\\n739563385\\r\\n185720640\\r\\n13265829\\r\\n460984258\\r\\n182404969\\r\\n988297561\\r\\n726301539\\r\\n301795019\\r\\n46434122\\r\\n882170987\\r\\n533948601\\r\\n729615799\\r...', '257947573\\r\\n350833899\\r\\n998147431\\r\\n282054341\\r\\n689337877\\r\\n802790225\\r\\n636332064\\r\\n611526839\\r\\n405886622\\r\\n295781176\\r\\n577883978\\r\\n211877869\\r\\n476761551\\r\\n471920813\\r\\n313000296\\r\\n8886097\\r\\n165109708\\r\\n231143899\\r\\n91489412\\r\\n972042214\\r\\n584771626\\r\\n771892731\\r\\n841370746\\r\\n736106038\\r\\n702414716\\r\\n368751476\\r\\n510452873\\r\\n253155296\\r\\n619859862\\r\\n14376831\\r\\n37833603\\r\\n94933236\\r\\n485696109\\r\\n96233228\\r\\n33691322\\r\\n403791251\\r\\n233190809\\r\\n447164049\\r\\n173248887\\r\\n549683390\\r\\n863382143\\r\\n717538465\\r\\n704413165\\r\\n210480955\\r\\n414122723\\r\\n922528686\\r\\n131321464\\r\\n40...', '723727157\\r\\n723727157\\r\\n898419922\\r\\n449209961\\r\\n898419922\\r\\n174692765\\r\\n723727157\\r\\n723727157\\r\\n723727157\\r\\n449209961\\r\\n449209961\\r\\n174692765\\r\\n723727157\\r\\n174692765\\r\\n723727157\\r\\n723727157\\r\\n623902726\\r\\n723727157\\r\\n723727157\\r\\n449209961\\r\\n723727157\\r\\n449209961\\r\\n449209961\\r\\n174692765\\r\\n723727157\\r\\n449209961\\r\\n349385530\\r\\n449209961\\r\\n449209961\\r\\n449209961\\r\\n449209961\\r\\n723727157\\r\\n449209961\\r\\n449209961\\r\\n449209961\\r\\n623902726\\r\\n449209961\\r\\n449209961\\r\\n898419922\\r\\n898419922\\r\\n723727157\\r\\n449209961\\r\\n723727157\\r\\n723727157\\r\\n723727157\\r\\n174692765\\r\\n17469...', '449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n44954...', '228892698\\r\\n323233274\\r\\n31331450\\r\\n583630535\\r\\n530020844\\r\\n200867506\\r\\n762566026\\r\\n461091654\\r\\n900597519\\r\\n687197433\\r\\n232025843\\r\\n294169404\\r\\n557699810\\r\\n988325579\\r\\n966739790\\r\\n633933968\\r\\n156657250\\r\\n762046687\\r\\n338898999\\r\\n134379009\\r\\n458304735\\r\\n975792999\\r\\n343970609\\r\\n589896825\\r\\n188161813\\r\\n733675269\\r\\n708610109\\r\\n303222613\\r\\n919742615\\r\\n718701996\\r\\n235158988\\r\\n5746951\\r\\n831841442\\r\\n194601216\\r\\n389029319\\r\\n946729129\\r\\n65449819\\r\\n768486090\\r\\n213226973\\r\\n847160941\\r\\n853773457\\r\\n913476325\\r\\n847334054\\r\\n435334042\\r\\n997551901\\r\\n781018670\\r\\n847334054...', '280562572\\r\\n27981324\\r\\n930424996\\r\\n580126064\\r\\n653672085\\r\\n638998124\\r\\n192370181\\r\\n304975360\\r\\n268606553\\r\\n887998181\\r\\n902057157\\r\\n419880164\\r\\n965999027\\r\\n37849969\\r\\n655704617\\r\\n915939588\\r\\n290316653\\r\\n133632797\\r\\n916310849\\r\\n291352554\\r\\n315435621\\r\\n753760137\\r\\n617080324\\r\\n863678858\\r\\n719694519\\r\\n658038314\\r\\n750307459\\r\\n915589744\\r\\n530437886\\r\\n512060713\\r\\n157922588\\r\\n178644172\\r\\n5715303\\r\\n194942404\\r\\n852097346\\r\\n696406228\\r\\n891303846\\r\\n489183600\\r\\n892182349\\r\\n437838373\\r\\n390449491\\r\\n931412865\\r\\n520118475\\r\\n724052962\\r\\n624309238\\r\\n315358057\\r\\n157108994...']}, {'input': '2000 300\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...', 'output': ['510770111\\r\\n586552453\\r\\n521518610\\r\\n729496815\\r\\n925336870\\r\\n218501419\\r\\n210003823\\r\\n721775463\\r\\n410294316\\r\\n59753754\\r\\n445916833\\r\\n149785626\\r\\n397166471\\r\\n850878761\\r\\n322612228\\r\\n400512598\\r\\n962933991\\r\\n238352988\\r\\n481795882\\r\\n312429269\\r\\n230724223\\r\\n668360989\\r\\n538774766\\r\\n7521020\\r\\n782227455\\r\\n932947153\\r\\n766620629\\r\\n621895347\\r\\n948462500\\r\\n49828435\\r\\n465611859\\r\\n508795684\\r\\n965408363\\r\\n876217222\\r\\n27461852\\r\\n849541586\\r\\n889517699\\r\\n887546242\\r\\n347913548\\r\\n274305965\\r\\n434804057\\r\\n916014055\\r\\n822187302\\r\\n339400794\\r\\n604867800\\r\\n368133826\\r\\n799958426\\r...', '738045334\\r\\n159282105\\r\\n578763229\\r\\n578763229\\r\\n477846315\\r\\n578763229\\r\\n159282105\\r\\n159282105\\r\\n159282105\\r\\n738045334\\r\\n159282105\\r\\n159282105\\r\\n738045334\\r\\n159282105\\r\\n738045334\\r\\n159282105\\r\\n578763229\\r\\n738045334\\r\\n578763229\\r\\n159282105\\r\\n159282105\\r\\n738045334\\r\\n578763229\\r\\n578763229\\r\\n578763229\\r\\n159282105\\r\\n578763229\\r\\n318564210\\r\\n578763229\\r\\n578763229\\r\\n159282105\\r\\n578763229\\r\\n159282105\\r\\n159282105\\r\\n159282105\\r\\n578763229\\r\\n159282105\\r\\n738045334\\r\\n578763229\\r\\n159282105\\r\\n159282105\\r\\n578763229\\r\\n738045334\\r\\n159282105\\r\\n738045334\\r\\n318564210\\r\\n73804...', '536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n53653...', '544865927\\r\\n362689553\\r\\n554047941\\r\\n662901553\\r\\n528631083\\r\\n623245685\\r\\n408599623\\r\\n383515404\\r\\n454842332\\r\\n96411147\\r\\n49835799\\r\\n979215047\\r\\n123957189\\r\\n241194187\\r\\n232012173\\r\\n930510515\\r\\n682596137\\r\\n940690446\\r\\n985602599\\r\\n592905181\\r\\n837226469\\r\\n463026429\\r\\n366947921\\r\\n259890854\\r\\n259558215\\r\\n423037922\\r\\n336940056\\r\\n739152127\\r\\n906091574\\r\\n273663875\\r\\n103463977\\r\\n218239152\\r\\n323832313\\r\\n988397061\\r\\n861312771\\r\\n369742383\\r\\n261687399\\r\\n997579075\\r\\n494364850\\r\\n668490477\\r\\n306599552\\r\\n268740229\\r\\n776878100\\r\\n482521724\\r\\n140192033\\r\\n252172746\\r\\n5279658...', '156061854\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n52020618\\r\\n52020618\\r\\n104041236\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n156061854\\r\\n104041236\\r\\n104041236\\r\\n104041236\\r\\n104041236\\r\\n104041236\\r\\n208082472\\r\\n208082472\\r\\n104041236\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n156061854\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n52020618\\r\\n156061854\\r\\n156061854\\r\\n104041236\\r\\n52020618\\r\\n52020618\\r\\n156061854\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n104041236\\r\\n104041236\\r\\n156061854\\r\\n52020618\\r...', '696015721\\r\\n931773777\\r\\n559486112\\r\\n847360916\\r\\n520999237\\r\\n330674091\\r\\n901387332\\r\\n817005789\\r\\n311776972\\r\\n19589756\\r\\n894472615\\r\\n644360731\\r\\n540588993\\r\\n761762342\\r\\n387103251\\r\\n712279217\\r\\n24626123\\r\\n870308250\\r\\n487286532\\r\\n403104550\\r\\n728773592\\r\\n564260282\\r\\n775161336\\r\\n604919022\\r\\n382066884\\r\\n133895986\\r\\n14584707\\r\\n323728056\\r\\n371794589\\r\\n189832070\\r\\n664212684\\r\\n375120849\\r\\n841631912\\r\\n277833388\\r\\n899970740\\r\\n674023221\\r\\n550168651\\r\\n205864687\\r\\n292155898\\r\\n484652909\\r\\n899246785\\r\\n641496229\\r\\n604195067\\r\\n520275282\\r\\n140579824\\r\\n200828320\\r\\n88943624...', '381761597\\r\\n749914123\\r\\n734966985\\r\\n451112838\\r\\n254375974\\r\\n408043495\\r\\n50147455\\r\\n317426730\\r\\n691474180\\r\\n297424671\\r\\n16576556\\r\\n950550287\\r\\n615062290\\r\\n508772409\\r\\n574097914\\r\\n755479957\\r\\n504073337\\r\\n232598914\\r\\n376960541\\r\\n704800943\\r\\n722703963\\r\\n943084953\\r\\n852281936\\r\\n604167024\\r\\n430991955\\r\\n691776511\\r\\n979477939\\r\\n916779041\\r\\n928976757\\r\\n9004809\\r\\n66623088\\r\\n160364271\\r\\n569831785\\r\\n753768578\\r\\n10158931\\r\\n829943628\\r\\n860984852\\r\\n599688760\\r\\n746963293\\r\\n90503616\\r\\n665117495\\r\\n843614199\\r\\n773004798\\r\\n52464119\\r\\n40225734\\r\\n193061049\\r\\n476979003\\r\\n451...']}, {'input': '2000 300\\r\\n1 1 1 0 0 1 1 0 0 1 0 1 1 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 0 0 0 1 0 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 0 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 0 1 0 1 0 0 0 0 1 0 1 0 1 1 1 1 0 0 0 1 1 0 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 0 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 0 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1 0 0 0 0 1 0...', 'output': ['520991218\\r\\n260495609\\r\\n781486827\\r\\n281527765\\r\\n460706912\\r\\n260495609\\r\\n43738083\\r\\n819065206\\r\\n639886059\\r\\n260495609\\r\\n639886059\\r\\n520991218\\r\\n520991218\\r\\n639886059\\r\\n819065206\\r\\n520991218\\r\\n639886059\\r\\n819065206\\r\\n639886059\\r\\n43738083\\r\\n781486827\\r\\n260495609\\r\\n520991218\\r\\n781486827\\r\\n819065206\\r\\n639886059\\r\\n281527765\\r\\n819065206\\r\\n460706912\\r\\n260495609\\r\\n639886059\\r\\n260495609\\r\\n304233692\\r\\n781486827\\r\\n260495609\\r\\n260495609\\r\\n43738083\\r\\n260495609\\r\\n639886059\\r\\n260495609\\r\\n819065206\\r\\n520991218\\r\\n520991218\\r\\n639886059\\r\\n639886059\\r\\n460706912\\r\\n26049560...']}, {'input': '2000 300\\r\\n1 1 1 0 0 0 1 0 1 1 1 0 1 0 0 1 1 1 1 0 0 1 0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 1 1 1 1 1 0 1 0 1 0 0 0 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 0 0 1 0 1 1 0 1 1 0 0 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1...', 'output': ['967309723\\r\\n488979754\\r\\n894231131\\r\\n227079250\\r\\n800673042\\r\\n803173636\\r\\n302660701\\r\\n49359452\\r\\n361182334\\r\\n613837368\\r\\n903714465\\r\\n783149148\\r\\n772569418\\r\\n153771444\\r\\n347053203\\r\\n383800081\\r\\n305903959\\r\\n591371347\\r\\n504143617\\r\\n554819601\\r\\n711091639\\r\\n993123371\\r\\n662636534\\r\\n799549517\\r\\n755795853\\r\\n257472564\\r\\n749178682\\r\\n44165553\\r\\n754769201\\r\\n677121173\\r\\n77251408\\r\\n825363165\\r\\n94378162\\r\\n905743915\\r\\n555723948\\r\\n401067893\\r\\n365827394\\r\\n778249947\\r\\n641361749\\r\\n657808321\\r\\n76885722\\r\\n205390090\\r\\n357248290\\r\\n762413024\\r\\n471855369\\r\\n953559875\\r\\n452364595\\r...']}, {'input': '2000 300\\r\\n1 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 1 1 1 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 0 1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 1 1 1 1 0 1 0 0 0 1 0 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 0 0 0 1 1 1 1 1 1 0 1 1 0 1 1 1 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 0 1 0 0 1 1 0 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 1 1 0 1 0 0 0 1 0 0 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 1 0 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 0 1...', 'output': ['353668818\\r\\n180952778\\r\\n350267066\\r\\n85276305\\r\\n498935339\\r\\n570367769\\r\\n947922902\\r\\n520199571\\r\\n977020824\\r\\n311854081\\r\\n369942273\\r\\n709342799\\r\\n241020253\\r\\n306637091\\r\\n574362410\\r\\n924893301\\r\\n259050261\\r\\n881412462\\r\\n505397126\\r\\n426307000\\r\\n368001455\\r\\n187561592\\r\\n507502858\\r\\n422600821\\r\\n840032307\\r\\n570586935\\r\\n847077944\\r\\n633577890\\r\\n21924242\\r\\n429617104\\r\\n40169532\\r\\n200231692\\r\\n301247265\\r\\n526536756\\r\\n236599712\\r\\n449404280\\r\\n482154139\\r\\n74891321\\r\\n744845075\\r\\n202529472\\r\\n497487224\\r\\n750227627\\r\\n791509388\\r\\n365064757\\r\\n435991351\\r\\n911452637\\r\\n230155510...']}, {'input': '200000 3000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n83030...', '746090912\\r\\n987874942\\r\\n493937471\\r\\n493937471\\r\\n241784030\\r\\n493937471\\r\\n746090912\\r\\n241784030\\r\\n746090912\\r\\n987874942\\r\\n493937471\\r\\n241784030\\r\\n493937471\\r\\n493937471\\r\\n987874942\\r\\n493937471\\r\\n987874942\\r\\n746090912\\r\\n746090912\\r\\n493937471\\r\\n746090912\\r\\n493937471\\r\\n493937471\\r\\n483568060\\r\\n493937471\\r\\n746090912\\r\\n746090912\\r\\n241784030\\r\\n746090912\\r\\n746090912\\r\\n987874942\\r\\n493937471\\r\\n746090912\\r\\n493937471\\r\\n746090912\\r\\n746090912\\r\\n746090912\\r\\n493937471\\r\\n746090912\\r\\n746090912\\r\\n746090912\\r\\n241784030\\r\\n493937471\\r\\n746090912\\r\\n241784030\\r\\n493937471\\r\\n49393...', '249477932\\r\\n163324885\\r\\n619370540\\r\\n591761649\\r\\n381202278\\r\\n400495236\\r\\n181619933\\r\\n483987183\\r\\n768059384\\r\\n853879792\\r\\n648642618\\r\\n525566838\\r\\n955999425\\r\\n754753895\\r\\n409143808\\r\\n470016419\\r\\n322658124\\r\\n100123809\\r\\n150684670\\r\\n101454359\\r\\n634006577\\r\\n229187060\\r\\n466357410\\r\\n35592186\\r\\n769389935\\r\\n547853534\\r\\n85820409\\r\\n289061762\\r\\n201245531\\r\\n244821008\\r\\n910095485\\r\\n40581744\\r\\n910760760\\r\\n733797749\\r\\n450390828\\r\\n440079067\\r\\n811634863\\r\\n573799237\\r\\n619703176\\r\\n460037301\\r\\n90144696\\r\\n512261348\\r\\n656958547\\r\\n636002401\\r\\n271099351\\r\\n573799237\\r\\n748766427...', '337242164\\r\\n175981139\\r\\n705993748\\r\\n951319188\\r\\n208728534\\r\\n926966446\\r\\n894219051\\r\\n142402527\\r\\n394342301\\r\\n747271382\\r\\n832167014\\r\\n925728471\\r\\n915824671\\r\\n371227534\\r\\n265828671\\r\\n404110515\\r\\n737503168\\r\\n526705442\\r\\n275596885\\r\\n225789012\\r\\n140757794\\r\\n548311062\\r\\n834642964\\r\\n960680644\\r\\n982693022\\r\\n298440480\\r\\n97139796\\r\\n357880981\\r\\n649164783\\r\\n74025029\\r\\n270644985\\r\\n37970467\\r\\n945129313\\r\\n422137796\\r\\n739979118\\r\\n389390401\\r\\n815106536\\r\\n311922619\\r\\n858860120\\r\\n411267193\\r\\n976503147\\r\\n835880939\\r\\n13346553\\r\\n661137775\\r\\n978979097\\r\\n527943417\\r\\n707231723...', '895547075\\r\\n50488475\\r\\n972784199\\r\\n737802803\\r\\n134349212\\r\\n579628449\\r\\n120501272\\r\\n588315405\\r\\n599840552\\r\\n714837825\\r\\n262849659\\r\\n448375127\\r\\n596572279\\r\\n172710075\\r\\n108458976\\r\\n317466571\\r\\n845058600\\r\\n348860806\\r\\n506174996\\r\\n501269960\\r\\n76979425\\r\\n561049607\\r\\n754144168\\r\\n500496863\\r\\n56852638\\r\\n736253107\\r\\n323142953\\r\\n631062404\\r\\n987492303\\r\\n864152840\\r\\n155163780\\r\\n16686131\\r\\n341291713\\r\\n213479047\\r\\n623578627\\r\\n815212310\\r\\n74571316\\r\\n580316230\\r\\n11782846\\r\\n9977202\\r\\n56164857\\r\\n453363728\\r\\n283577160\\r\\n112674480\\r\\n770828548\\r\\n441236116\\r\\n475210843\\r\\n997...', '743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n74369...', '743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n74369...', '34499784\\r\\n374247743\\r\\n362747815\\r\\n297560637\\r\\n574121750\\r\\n869682055\\r\\n449997441\\r\\n458622387\\r\\n930182193\\r\\n940681955\\r\\n376622642\\r\\n28249737\\r\\n622933686\\r\\n969931858\\r\\n400622664\\r\\n671871138\\r\\n811807848\\r\\n331623096\\r\\n223311188\\r\\n305748258\\r\\n203623639\\r\\n439935004\\r\\n185436339\\r\\n481622243\\r\\n517559518\\r\\n585621678\\r\\n66124586\\r\\n679996001\\r\\n894244918\\r\\n45999712\\r\\n243436062\\r\\n887057463\\r\\n525184298\\r\\n990056732\\r\\n154311620\\r\\n198873841\\r\\n227623661\\r\\n430809975\\r\\n12937419\\r\\n194561368\\r\\n140374035\\r\\n610059025\\r\\n715495951\\r\\n677058261\\r\\n731308352\\r\\n710120554\\r\\n143749100\\r...', '743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n74369...', '563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n56365...', '948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n94886...', '616415891\\r\\n743692045\\r\\n743692045\\r\\n616415891\\r\\n489139737\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n743692045\\r\\n870968199\\r\\n616415891\\r\\n743692045\\r\\n616415891\\r\\n743692045\\r\\n743692045\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n743692045\\r\\n489139737\\r\\n870968199\\r\\n870968199\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n743692045\\r\\n616415891\\r\\n743692045\\r\\n743692045\\r\\n743692045\\r\\n361863583\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n870968199\\r\\n616415891\\r\\n870968199\\r\\n743692045\\r\\n743692045\\r\\n107311275\\r\\n743692045\\r\\n870968199\\r\\n870968199\\r\\n87096...']}, {'input': '200000 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['534464893\\r\\n70685433\\r\\n141370866\\r\\n605150326\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n605150326\\r\\n605150326\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n141370866\\r\\n70685433\\r\\n534464893\\r\\n141370866\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n534464893\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n70685433\\r\\n605150326\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n...', '434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n43434...', '479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n47934...', '983882738\\r\\n723119688\\r\\n459823065\\r\\n556901314\\r\\n70724963\\r\\n266615302\\r\\n669551615\\r\\n128160584\\r\\n374823721\\r\\n636048406\\r\\n410086236\\r\\n880577836\\r\\n119251355\\r\\n80183061\\r\\n594759171\\r\\n13376576\\r\\n422252375\\r\\n548479185\\r\\n235532967\\r\\n555429175\\r\\n697576973\\r\\n194705367\\r\\n244991065\\r\\n696417466\\r\\n575930209\\r\\n911572937\\r\\n690252582\\r\\n173917166\\r\\n286156762\\r\\n203240195\\r\\n371392343\\r\\n232850391\\r\\n10955702\\r\\n65159878\\r\\n81942367\\r\\n928468125\\r\\n286592932\\r\\n499727395\\r\\n803102816\\r\\n81855133\\r\\n235158566\\r\\n824901521\\r\\n295851097\\r\\n716980269\\r\\n913157775\\r\\n996485047\\r\\n807919099\\r\\n4...', '535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n53563...', '483259721\\r\\n483259721\\r\\n451534810\\r\\n740752037\\r\\n483259721\\r\\n483259721\\r\\n709027126\\r\\n483259721\\r\\n966519442\\r\\n740752037\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n740752037\\r\\n225767405\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n451534810\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n966519442\\r\\n225767405\\r\\n740752037\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n740752037\\r\\n740752037\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n225767405\\r\\n740752037\\r\\n483259721\\r\\n225767405\\r\\n740752037\\r\\n74075...', '365182673\\r\\n453133330\\r\\n646237559\\r\\n383557795\\r\\n419033749\\r\\n340436101\\r\\n116418016\\r\\n678527788\\r\\n945667567\\r\\n79030627\\r\\n870994872\\r\\n815130278\\r\\n370916978\\r\\n677151415\\r\\n467150520\\r\\n882361399\\r\\n890542201\\r\\n249936864\\r\\n39196741\\r\\n947579002\\r\\n636680384\\r\\n295607138\\r\\n675342063\\r\\n808325849\\r\\n29104504\\r\\n25918779\\r\\n103037971\\r\\n291784268\\r\\n445589673\\r\\n215200138\\r\\n658241231\\r\\n704446567\\r\\n478414964\\r\\n374535682\\r\\n193639291\\r\\n871632017\\r\\n186732779\\r\\n291784268\\r\\n138616008\\r\\n491795009\\r\\n475331322\\r\\n689894315\\r\\n243667497\\r\\n853256895\\r\\n714003742\\r\\n774124185\\r\\n363271238...', '985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n98542...', '155925765\\r\\n487818429\\r\\n547205425\\r\\n780737503\\r\\n891037610\\r\\n578930143\\r\\n825301017\\r\\n138861660\\r\\n552655747\\r\\n896394864\\r\\n881431780\\r\\n167493014\\r\\n480546290\\r\\n147428613\\r\\n697960072\\r\\n762448385\\r\\n870903408\\r\\n251332589\\r\\n614973238\\r\\n898519152\\r\\n581333635\\r\\n223833180\\r\\n271513325\\r\\n829479792\\r\\n130457576\\r\\n488950374\\r\\n631091534\\r\\n259853008\\r\\n403102846\\r\\n643511524\\r\\n491144463\\r\\n683066789\\r\\n279987210\\r\\n916459265\\r\\n497517327\\r\\n461078693\\r\\n513286618\\r\\n11055375\\r\\n943036132\\r\\n453946156\\r\\n770116063\\r\\n285321197\\r\\n954649915\\r\\n686299755\\r\\n305432132\\r\\n314991428\\r\\n917591...', '979248391\\r\\n467909552\\r\\n175190733\\r\\n498757573\\r\\n436634896\\r\\n282945489\\r\\n831422982\\r\\n525572199\\r\\n608769567\\r\\n291190788\\r\\n623553625\\r\\n907228321\\r\\n19120025\\r\\n908756352\\r\\n635157558\\r\\n367120190\\r\\n895500325\\r\\n121864053\\r\\n271093430\\r\\n805461626\\r\\n799170993\\r\\n621048261\\r\\n209948086\\r\\n214834751\\r\\n291190788\\r\\n88084033\\r\\n941559039\\r\\n256433435\\r\\n462472189\\r\\n261870798\\r\\n718354926\\r\\n62673375\\r\\n599120300\\r\\n207566785\\r\\n71042737\\r\\n669914911\\r\\n844128311\\r\\n594233635\\r\\n758976277\\r\\n186492094\\r\\n238841441\\r\\n949377703\\r\\n280013490\\r\\n621474896\\r\\n309333480\\r\\n356245464\\r\\n817740320...']}, {'input': '200000 3000\\r\\n0 1 1 1 1 1 0 1 1 1 1 0 0 0 1 1 1 0 1 0 0 1 1 1 1 1 0 1 0 1 1 0 0 0 1 1 1 1 0 1 1 0 0 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 0 1 1 1 0 0 1 0 0 1 0 0 0 1 1 1 0 0 1 1 1 0 0 0 1 0 0 1 0 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 1 1 1 1 1 0 1 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 0 1 0 1 1 1 0 0 0 1 1 0 1 1 1 0 0 1 1 1 1 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 ...', 'output': ['684128648\\r\\n534537704\\r\\n70831055\\r\\n605368759\\r\\n605368759\\r\\n534537704\\r\\n55897238\\r\\n70831055\\r\\n534537704\\r\\n534537704\\r\\n605368759\\r\\n684128648\\r\\n55897238\\r\\n740025886\\r\\n534537704\\r\\n70831055\\r\\n70831055\\r\\n684128648\\r\\n70831055\\r\\n684128648\\r\\n425910181\\r\\n70831055\\r\\n605368759\\r\\n534537704\\r\\n534537704\\r\\n605368759\\r\\n684128648\\r\\n70831055\\r\\n684128648\\r\\n605368759\\r\\n70831055\\r\\n370012943\\r\\n370012943\\r\\n370012943\\r\\n605368759\\r\\n70831055\\r\\n534537704\\r\\n70831055\\r\\n370012943\\r\\n141662110\\r\\n534537704\\r\\n370012943\\r\\n370012943\\r\\n70831055\\r\\n684128648\\r\\n370012943\\r\\n684128648\\r\\n5345377...']}, {'input': '200000 3000\\r\\n1 1 0 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1 0 1 1 1 0 0 0 0 1 0 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 1 0 0 0 0 1 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 1 1 1 0 1 0 0 1 1 0 1 0 1 1 0 0 1 1 1 0 1 0 1 0 1 0 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 1 1 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 1 1 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 1 1 0 1 1 1 0 1 1 0 1 1 0 0 1 0 1 0 0 0 1 1 0 1 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 1 ...', 'output': ['331265679\\r\\n248932636\\r\\n609274319\\r\\n474255977\\r\\n102055814\\r\\n485644908\\r\\n626044190\\r\\n431097835\\r\\n319780031\\r\\n47044666\\r\\n687413158\\r\\n404806427\\r\\n125126455\\r\\n282606731\\r\\n307585492\\r\\n584577913\\r\\n604465119\\r\\n366599088\\r\\n490459582\\r\\n11853006\\r\\n753101524\\r\\n749114305\\r\\n816668970\\r\\n25465595\\r\\n942396724\\r\\n387086401\\r\\n558715961\\r\\n470999022\\r\\n908318742\\r\\n535377307\\r\\n712631115\\r\\n501708418\\r\\n465458062\\r\\n906281962\\r\\n309027298\\r\\n466289495\\r\\n88346508\\r\\n21689911\\r\\n46580591\\r\\n650678352\\r\\n435081076\\r\\n202663995\\r\\n554027989\\r\\n280201535\\r\\n865380747\\r\\n516485969\\r\\n226759102\\r\\n...']}, {'input': '200000 3000\\r\\n0 0 1 1 1 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 1 0 0 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 0 1 0 0 0 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 1 1 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 1 0 0 1 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 0 1 0 0 0 1 0 1 0 1 ...', 'output': ['702758762\\r\\n222668721\\r\\n663197048\\r\\n675792950\\r\\n759259581\\r\\n332486741\\r\\n171127920\\r\\n414458191\\r\\n349087590\\r\\n847918503\\r\\n522872021\\r\\n540727038\\r\\n813504457\\r\\n278812310\\r\\n949679696\\r\\n784095578\\r\\n918470307\\r\\n482110597\\r\\n535952792\\r\\n109088580\\r\\n967478176\\r\\n268019403\\r\\n523209396\\r\\n80286422\\r\\n566422901\\r\\n182974112\\r\\n166764579\\r\\n716767192\\r\\n203579125\\r\\n975507557\\r\\n770975186\\r\\n884777286\\r\\n433828625\\r\\n891459014\\r\\n519109900\\r\\n907459392\\r\\n591988953\\r\\n479131884\\r\\n989822907\\r\\n846824242\\r\\n304414023\\r\\n13755521\\r\\n6710438\\r\\n355497544\\r\\n718926904\\r\\n912736930\\r\\n173287893...']}, {'input': '10 3000\\r\\n1 1 1 1 1 0 0 0 1 1\\r\\n6 22 5 2 4 15 4 7 31 4\\r\\n', 'output': ['561258918\\r\\n61460660\\r\\n467715765\\r\\n187086306\\r\\n374172612\\r\\n538110090\\r\\n143496024\\r\\n251118042\\r\\n903349037\\r\\n374172612']}, {'input': '100 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n10 8 1 9 7 5 12 9 15 7 16 5 17 5 17 21 11 3 4 4 30 17 3 84 12 30 2 8 2 2 22 24 15 11 15 13 7 17 1 12 8 4 3 6 5 15 1 3 4 2 27 3 11 11 3 3 3 5 14 2 5 13 6 2 6 5 6 19 3 16 4 12 11 2 2 3 25 14 6 11 22 4 10 32 9 19 14 2 2 3 4 3 2 5 18 14 2 7 3 8\\r\\n', 'output': ['23677346\\r\\n418239618\\r\\n800963217\\r\\n220958482\\r\\n615520754\\r\\n11838673\\r\\n627359427\\r\\n220958482\\r\\n35516019\\r\\n615520754\\r\\n836479236\\r\\n11838673\\r\\n639198100\\r\\n11838673\\r\\n639198100\\r\\n848317909\\r\\n824640563\\r\\n406400945\\r\\n209119809\\r\\n209119809\\r\\n71032038\\r\\n639198100\\r\\n406400945\\r\\n398538577\\r\\n627359427\\r\\n71032038\\r\\n603682081\\r\\n418239618\\r\\n19778681\\r\\n603682081\\r\\n651036773\\r\\n256474501\\r\\n35516019\\r\\n824640563\\r\\n35516019\\r\\n430078291\\r\\n615520754\\r\\n639198100\\r\\n800963217\\r\\n627359427\\r\\n418239618\\r\\n209119809\\r\\n406400945\\r\\n812801890\\r\\n11838673\\r\\n35516019\\r\\n800963217\\r\\n406400...']}, {'input': '1000 3000\\r\\n0 0 1 0 1 0 0 1 1 1 1 0 1 0 0 1 1 0 0 0 0 0 0 1 0 1 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 0 1 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0 1 0 0 0 1 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 ...', 'output': ['984664827\\r\\n971085301\\r\\n837724678\\r\\n984664827\\r\\n225735001\\r\\n971085301\\r\\n984664827\\r\\n611989677\\r\\n65215326\\r\\n611989677\\r\\n837724678\\r\\n984664827\\r\\n225735001\\r\\n984664827\\r\\n971085301\\r\\n225735001\\r\\n225735001\\r\\n984664827\\r\\n971085301\\r\\n957505775\\r\\n971085301\\r\\n984664827\\r\\n943926249\\r\\n225735001\\r\\n971085301\\r\\n611989677\\r\\n837724678\\r\\n971085301\\r\\n225735001\\r\\n971085301\\r\\n225735001\\r\\n971085301\\r\\n984664827\\r\\n971085301\\r\\n943926249\\r\\n943926249\\r\\n611989677\\r\\n971085301\\r\\n984664827\\r\\n957505775\\r\\n971085301\\r\\n225735001\\r\\n971085301\\r\\n971085301\\r\\n225735001\\r\\n837724678\\r\\n611989...']}, {'input': '1000 3000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['499122179\\r\\n5\\r\\n499122179\\r\\n5\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122184\\r\\n499122179\\r\\n5\\r\\n5\\r\\n5\\r\\n499122184\\r\\n10\\r\\n499122179\\r\\n499122179\\r\\n499122184\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n499122184\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122184\\r\\n499122184\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n499122184\\r\\n5\\r\\n499122184\\r\\n5\\r\\n499122184\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n499122184\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122184\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122184\\r\\n499122184\\r\\n5...']}, {'input': '199990 3000\\r\\n1 0 0 1 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 1 1 0 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0 1 1 0 1 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 1 1 0 0 1 0 0 1 1 0 0 1 0 1 0 0 1 0 1 1 1 1 0 0 1 1 1 1 0 1 1 0 1 0 0 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 1 0 0 1 1 1 0 1 0 1 1 0 1 1 0 1 0 1 0 1 1 1 0 0 0 1 0 1 0 ...', 'output': ['646452156\\r\\n960868656\\r\\n118518242\\r\\n184272685\\r\\n747024268\\r\\n964037469\\r\\n951101180\\r\\n377347150\\r\\n254993892\\r\\n11139421\\r\\n70322210\\r\\n525571057\\r\\n926475930\\r\\n63428346\\r\\n756018063\\r\\n626131891\\r\\n466781454\\r\\n656042659\\r\\n69698706\\r\\n359694160\\r\\n226813875\\r\\n191435355\\r\\n897230167\\r\\n851910875\\r\\n872964055\\r\\n741910138\\r\\n963242791\\r\\n859073545\\r\\n501205753\\r\\n252469038\\r\\n77916365\\r\\n622358084\\r\\n867246600\\r\\n381481659\\r\\n57646031\\r\\n326439010\\r\\n37314488\\r\\n267966014\\r\\n386173645\\r\\n224253188\\r\\n693822089\\r\\n652063749\\r\\n209704954\\r\\n936775840\\r\\n675102836\\r\\n581756207\\r\\n18809453\\r\\n84...']}, {'input': '199991 3000\\r\\n1 0 1 0 0 1 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 1 0 0 0 0 1 0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 0 0 1 1 ...', 'output': ['576788803\\r\\n851579816\\r\\n464431389\\r\\n925910539\\r\\n240339104\\r\\n317886519\\r\\n67707478\\r\\n262772669\\r\\n221595177\\r\\n612937974\\r\\n736137684\\r\\n268724388\\r\\n68361383\\r\\n847191682\\r\\n557301933\\r\\n913346054\\r\\n648280739\\r\\n171995554\\r\\n235269506\\r\\n530242292\\r\\n148650394\\r\\n908499525\\r\\n304200830\\r\\n721371958\\r\\n474031015\\r\\n817280262\\r\\n825707282\\r\\n465373250\\r\\n245622892\\r\\n341231679\\r\\n845696111\\r\\n853007293\\r\\n68361383\\r\\n915771149\\r\\n987480726\\r\\n726171771\\r\\n707992711\\r\\n478931968\\r\\n847890178\\r\\n687514833\\r\\n732279394\\r\\n927044872\\r\\n856499296\\r\\n862463110\\r\\n77307104\\r\\n484794642\\r\\n615409785...']}, {'input': '199992 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 ...', 'output': ['944579271\\r\\n815447430\\r\\n121435610\\r\\n89385736\\r\\n85360285\\r\\n56962924\\r\\n289585947\\r\\n344015172\\r\\n223771444\\r\\n652123221\\r\\n591303048\\r\\n4248454\\r\\n306743823\\r\\n968709911\\r\\n670850059\\r\\n672191876\\r\\n417953645\\r\\n24521845\\r\\n946915719\\r\\n777789018\\r\\n60838440\\r\\n839186865\\r\\n79733480\\r\\n134590444\\r\\n755625163\\r\\n504520550\\r\\n752912502\\r\\n172585260\\r\\n452314215\\r\\n812559060\\r\\n865646468\\r\\n584772439\\r\\n717751255\\r\\n344015172\\r\\n217454686\\r\\n551825\\r\\n985330789\\r\\n733776192\\r\\n951920831\\r\\n371680341\\r\\n447096882\\r\\n332238689\\r\\n688429333\\r\\n390729899\\r\\n623930596\\r\\n453096625\\r\\n858100172\\r\\n14638...']}, {'input': '199993 3000\\r\\n1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['189220773\\r\\n219328456\\r\\n767760662\\r\\n806220888\\r\\n797979411\\r\\n545740580\\r\\n219383989\\r\\n75297991\\r\\n40929720\\r\\n935115229\\r\\n532004785\\r\\n529257626\\r\\n49282263\\r\\n789793467\\r\\n545740580\\r\\n962586819\\r\\n485358615\\r\\n471678353\\r\\n907699172\\r\\n803473729\\r\\n408604762\\r\\n963918788\\r\\n35602001\\r\\n847372740\\r\\n611561330\\r\\n216636830\\r\\n729467035\\r\\n298885001\\r\\n73784562\\r\\n95928433\\r\\n405857603\\r\\n312620796\\r\\n126147182\\r\\n518268990\\r\\n353717115\\r\\n501841569\\r\\n512830205\\r\\n685568024\\r\\n252294364\\r\\n962586819\\r\\n477172671\\r\\n252637898\\r\\n246744513\\r\\n434391811\\r\\n52084955\\r\\n807039242\\r\\n414043547\\r\\n2...']}, {'input': '199994 3000\\r\\n0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 1 0 0 1 1 1 0 1 0 0 0 1 1 0 1 0 1 0 0 0 0 0 0 1 1 0 1 0 0 1 1 0 0 1 0 0 0 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1 0 0 0 1 1 1 0 0 1 0 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 ...', 'output': ['336654971\\r\\n732535\\r\\n815250185\\r\\n326444659\\r\\n729180253\\r\\n129624924\\r\\n358796707\\r\\n444866639\\r\\n754810869\\r\\n843551608\\r\\n256744726\\r\\n70820418\\r\\n164515107\\r\\n207034102\\r\\n575220043\\r\\n87535002\\r\\n682699176\\r\\n43984065\\r\\n797070531\\r\\n806189316\\r\\n815982720\\r\\n704840912\\r\\n900587582\\r\\n585042405\\r\\n921264248\\r\\n459213067\\r\\n352526818\\r\\n883140463\\r\\n815669240\\r\\n511377385\\r\\n785483692\\r\\n225259507\\r\\n505565288\\r\\n832271475\\r\\n46481077\\r\\n860266192\\r\\n560703064\\r\\n99613410\\r\\n150730663\\r\\n410704936\\r\\n704840912\\r\\n915837096\\r\\n953960881\\r\\n968477860\\r\\n589004487\\r\\n187389378\\r\\n517884662\\r\\n93...']}, {'input': '199995 3000\\r\\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 ...', 'output': ['662762303\\r\\n929872487\\r\\n874878479\\r\\n456275271\\r\\n715183658\\r\\n400437516\\r\\n521458497\\r\\n76578537\\r\\n927594887\\r\\n897280874\\r\\n185062970\\r\\n530346011\\r\\n941267798\\r\\n71793140\\r\\n377419134\\r\\n675559304\\r\\n591654880\\r\\n719511098\\r\\n599406031\\r\\n622421976\\r\\n250476393\\r\\n605557988\\r\\n772627865\\r\\n133099572\\r\\n594620634\\r\\n848508553\\r\\n404542070\\r\\n193952921\\r\\n255031593\\r\\n40568087\\r\\n771704693\\r\\n756662785\\r\\n869935052\\r\\n847369753\\r\\n36238210\\r\\n358730629\\r\\n164552385\\r\\n938076721\\r\\n767600139\\r\\n458579571\\r\\n693757159\\r\\n843723156\\r\\n975014694\\r\\n858992824\\r\\n955398666\\r\\n756432588\\r\\n585958443...']}, {'input': '199996 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 ...', 'output': ['670876956\\r\\n282683795\\r\\n377011834\\r\\n803395587\\r\\n676385588\\r\\n935914218\\r\\n718622147\\r\\n536417373\\r\\n403228588\\r\\n282205508\\r\\n715874782\\r\\n593703261\\r\\n180906172\\r\\n125082949\\r\\n159213672\\r\\n79114647\\r\\n828013417\\r\\n919922217\\r\\n269261194\\r\\n677998414\\r\\n539957249\\r\\n116020539\\r\\n719578721\\r\\n947915860\\r\\n933837007\\r\\n911830283\\r\\n475864127\\r\\n320232037\\r\\n207122926\\r\\n915004383\\r\\n801796663\\r\\n301300804\\r\\n489000308\\r\\n929955103\\r\\n208735752\\r\\n169096397\\r\\n431236133\\r\\n485282467\\r\\n675865595\\r\\n711172563\\r\\n31711484\\r\\n780760415\\r\\n330893371\\r\\n339149368\\r\\n107928605\\r\\n630648538\\r\\n1150500...']}, {'input': '199997 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['509540793\\r\\n120976575\\r\\n549866318\\r\\n103886913\\r\\n46471726\\r\\n486304930\\r\\n356783524\\r\\n889560180\\r\\n199228995\\r\\n889560180\\r\\n825998792\\r\\n728258080\\r\\n40325525\\r\\n723460820\\r\\n584045642\\r\\n849234655\\r\\n398457990\\r\\n44073096\\r\\n355733835\\r\\n753892573\\r\\n259042812\\r\\n526630455\\r\\n218717287\\r\\n69707589\\r\\n445979405\\r\\n843088454\\r\\n549866318\\r\\n900503641\\r\\n915194673\\r\\n110033114\\r\\n233408319\\r\\n632915998\\r\\n443580775\\r\\n883413979\\r\\n356783524\\r\\n63561388\\r\\n314059369\\r\\n628118738\\r\\n543720117\\r\\n420344912\\r\\n705022217\\r\\n89195881\\r\\n535175286\\r\\n987300892\\r\\n72106219\\r\\n543720117\\r\\n785673267\\r\\n2...', '791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n79153...']}, {'input': '199998 3000\\r\\n1 0 1 1 1 0 1 0 1 1 1 1 0 1 0 0 0 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 0 1 1 1 1 0 1 1 0 0 1 1 1 0 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 0 1 0 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 1 1 0 1 1 0 0 0 0 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 0 0 0 1 1 1 1 0 1 1 0 1 0 0 0 1 1 1 0 1 0 1 1 1 0 0 1 0 1 0 1 1 0 1 1 1 1 0 0 0 1 0 1 1 1 0 0 1 0 0 0 1 0 1 1 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 1 1 1 0 0 1 1 0 0 ...', 'output': ['728321596\\r\\n638956912\\r\\n987568459\\r\\n799092377\\r\\n597086927\\r\\n782772546\\r\\n770287170\\r\\n255784080\\r\\n699516389\\r\\n256762390\\r\\n656812813\\r\\n513524780\\r\\n416026596\\r\\n285567597\\r\\n279669471\\r\\n136357125\\r\\n790734343\\r\\n479381626\\r\\n898668365\\r\\n822581531\\r\\n870855601\\r\\n827897584\\r\\n408064799\\r\\n759611276\\r\\n235779603\\r\\n990282556\\r\\n571135194\\r\\n279669471\\r\\n311516659\\r\\n287631268\\r\\n607109724\\r\\n822559637\\r\\n639460200\\r\\n369129744\\r\\n111968446\\r\\n157186402\\r\\n495141278\\r\\n652212868\\r\\n143815634\\r\\n367752526\\r\\n165008822\\r\\n592117981\\r\\n400788425\\r\\n793754430\\r\\n966900453\\r\\n2484473\\r\\n9089752...', '964927693\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n278374139\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n278374139\\r\\n278374139\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n96492...']}, {'input': '199999 3000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 0 0 1 1 0 0 1 0 1 1 1 0 1 1 1 0 1 1 ...', 'output': ['659992102\\r\\n43534688\\r\\n613251861\\r\\n688791385\\r\\n969096633\\r\\n244584877\\r\\n407865304\\r\\n186960964\\r\\n243317864\\r\\n549539932\\r\\n991833247\\r\\n262687380\\r\\n543128826\\r\\n494636937\\r\\n223625258\\r\\n610530943\\r\\n823731817\\r\\n148706567\\r\\n321255216\\r\\n793342431\\r\\n574351284\\r\\n666241663\\r\\n731705240\\r\\n759075965\\r\\n574351284\\r\\n267483036\\r\\n533214424\\r\\n650213898\\r\\n38254397\\r\\n748651581\\r\\n341432457\\r\\n458755021\\r\\n851102542\\r\\n458618823\\r\\n777016923\\r\\n879306339\\r\\n831596828\\r\\n223948348\\r\\n334458632\\r\\n214654779\\r\\n250672893\\r\\n599162636\\r\\n601914362\\r\\n888897651\\r\\n620419998\\r\\n546470577\\r\\n2155987...', '959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n550771238\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n550771238\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n95962...']}, {'input': '200000 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 ...', 'output': ['893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n917300718\\r\\n917300718\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n917300718\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n917300718\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n917300718\\r\\n917300718\\r\\n917300718\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n89340...', '777798569\\r\\n231173131\\r\\n230887037\\r\\n573284389\\r\\n184819702\\r\\n389069614\\r\\n336642733\\r\\n374568480\\r\\n855432105\\r\\n25206655\\r\\n4356888\\r\\n605147597\\r\\n575616793\\r\\n296362756\\r\\n407873071\\r\\n112177054\\r\\n213967495\\r\\n814007752\\r\\n159623960\\r\\n280717246\\r\\n614422648\\r\\n758973286\\r\\n52239134\\r\\n765343745\\r\\n464084652\\r\\n192059356\\r\\n447272940\\r\\n617899428\\r\\n590679202\\r\\n570104616\\r\\n874554395\\r\\n774321789\\r\\n991301706\\r\\n991873894\\r\\n397156637\\r\\n113523353\\r\\n617052059\\r\\n46639523\\r\\n446403745\\r\\n35361814\\r\\n921640272\\r\\n891146426\\r\\n273084002\\r\\n58808253\\r\\n533015325\\r\\n30707919\\r\\n154980978\\r\\n71...']}, {'input': '200000 3000\\r\\n1 0 0 0 0 1 0 0 0 1 0 0 1 0 1 1 1 1 1 1 0 1 1 1 1 0 0 0 0 0 1 1 0 0 0 1 0 0 0 1 0 0 1 0 1 1 0 1 1 0 1 0 1 0 1 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 0 1 1 0 1 1 0 0 0 1 0 0 1 1 0 1 1 0 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 0 1 0 1 1 1 1 0 1 0 0 0 1 0 0 0 1 1 1 0 0 1 1 0 1 1 0 0 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 0 0 1 0 0 0 1 0 ...', 'output': ['203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n712662175\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n203557555\\r\\n203557555\\r\\n71266...']}, {'input': '200000 3000\\r\\n0 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 1 0 1 1 1 0 0 0 1 0 1 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 1 1 1 0 1 0 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 1 0 1 1 0 1 1 0 0 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 0 1 1 0 0 1 0 0 1 1 0 0 1 1 1 1 1 1 0 0 1 0 1 1 0 1 1 1 1 0 0 0 1 1 1 1 1 0 0 1 1 0 0 1 1 0 1 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 0 1 0 1 1 0 0 1 0 1 ...', 'output': ['532284272\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n53...']}]", "id": 165, "lang": "python3", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "Brothers Fred and George Weasley once got into the sporting goods store and opened a box of Quidditch balls. After long and painful experiments they found out that the Golden Snitch is not enchanted at all. It is simply a programmed device. It always moves along the same trajectory, which is a polyline with vertices at the points (x0,\u2009y0,\u2009z0), (x1,\u2009y1,\u2009z1), ..., (xn,\u2009yn,\u2009zn). At the beginning of the game the snitch is positioned at the point (x0,\u2009y0,\u2009z0), and then moves along the polyline at the constant speed vs. The twins have not yet found out how the snitch behaves then. Nevertheless, they hope that the retrieved information will help Harry Potter and his team in the upcoming match against Slytherin. Harry Potter learned that at the beginning the game he will be at the point (Px,\u2009Py,\u2009Pz) and his super fast Nimbus 2011 broom allows him to move at the constant speed vp in any direction or remain idle. vp is not less than the speed of the snitch vs. Harry Potter, of course, wants to catch the snitch as soon as possible. Or, if catching the snitch while it is moving along the polyline is impossible, he wants to hurry the Weasley brothers with their experiments. Harry Potter catches the snitch at the time when they are at the same point. Help Harry.", "input_specification": "The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u200910000). The following n\u2009+\u20091 lines contain the coordinates xi, yi, zi, separated by single spaces. The coordinates of any two consecutive points do not coincide. The next line contains the velocities vp and vs, the last line contains Px, Py, Pz, separated by single spaces. All the numbers in the input are integers, their absolute value does not exceed 104. The speeds are strictly positive. It is guaranteed that vs\u2009\u2264\u2009vp.", "output_specification": "If Harry Potter can catch the snitch while it is moving along the polyline (including the end (xn,\u2009yn,\u2009zn)), print \"YES\" in the first line (without the quotes). Print in the second line t, which is the earliest moment of time, when Harry will be able to catch the snitch. On the third line print three numbers X, Y, Z, the coordinates of the point at which this happens. The absolute or relative error in the answer should not exceed 10\u2009-\u20096. If Harry is not able to catch the snitch during its moving along the described polyline, print \"NO\".", "notes": null, "sample_inputs": ["4\n0 0 0\n0 10 0\n10 10 0\n10 0 0\n0 0 0\n1 1\n5 5 25", "4\n0 0 0\n0 10 0\n10 10 0\n10 0 0\n0 0 0\n1 1\n5 5 50", "1\n1 2 3\n4 5 6\n20 10\n1 2 3"], "sample_outputs": ["YES\n25.5000000000\n10.0000000000 4.5000000000 0.0000000000", "NO", "YES\n0.0000000000\n1.0000000000 2.0000000000 3.0000000000"], "src_uid": "6e2a8aa58ed8cd308cb482e4c24cbbbb", "lang_cluster": "Python", "difficulty": 2100, "human_solution": "import math,sys\neps = 1e-8\nn = input()\nal = [map(int,raw_input().split()) for i in xrange(n+1)]\nvp,vs = map(int,raw_input().split())\npx,py,pz = map(int,raw_input().split())\nal = [(x-px,y-py,z-pz) for x,y,z in al]\n\nd3=lambda x,y,z:x*x+y*y+z*z\nt0 = 0\nrt,pt = None,0\nts = 0\n        \nfor i in range(n):\n    c = [y-x for x,y in zip(al[i],al[i+1])]\n    ll = d3(*c)\n    l = ll**0.5\n    ts+=l\n    te = ts/vs\n    v = [vs*x for x in c]\n    s = [l*x-a*t0 for x,a in zip(al[i],v)]\n    a = d3(*v)-vp*vp*ll\n    b = 2*sum(x*i for x,i in zip(s,v))\n    c = d3(*s)\n    d = b*b-4*a*c\n    fa = abs(a)<eps\n    def tsol(t):\n        global rt,pt\n        if t0-eps<t<te+eps and (rt is None or rt>t):\n            rt,pt=t,[(x+a*t)/l for x,a in zip(s,v)]\n    if fa:\n        if abs(b)>eps: tsol(-c/b)\n    elif d>-eps:\n        if d<eps: d=0\n        a*=2.0\n        d**=0.5\n        tsol((-b+d)/a)\n        tsol((-b-d)/a)\n    t0 = te\nif rt is None: print \"NO\"\nelse:\n    print \"YES\"\n    print \"%.10f\"%rt\n    print \"%.10f\"%(pt[0]+px),\"%.10f\"%(pt[1]+py),\"%.10f\"%(pt[2]+pz)\n", "testcases": "[{'input': '4\\r\\n0 0 0\\r\\n0 10 0\\r\\n10 10 0\\r\\n10 0 0\\r\\n0 0 0\\r\\n1 1\\r\\n5 5 25\\r\\n', 'output': ['YES\\r\\n25.5000000000\\r\\n10.0000000000 4.5000000000 0.0000000000\\r\\n']}, {'input': '4\\r\\n0 0 0\\r\\n0 10 0\\r\\n10 10 0\\r\\n10 0 0\\r\\n0 0 0\\r\\n1 1\\r\\n5 5 50\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1 2 3\\r\\n4 5 6\\r\\n20 10\\r\\n1 2 3\\r\\n', 'output': ['YES\\r\\n0.0000000000\\r\\n1.0000000000 2.0000000000 3.0000000000\\r\\n']}, {'input': '4\\r\\n0 0 0\\r\\n0 1 0\\r\\n1 1 0\\r\\n1 0 0\\r\\n0 0 0\\r\\n10 5\\r\\n0 0 8\\r\\n', 'output': ['YES\\r\\n0.8000000000\\r\\n0.0000000000 0.0000000000 0.0000000000\\r\\n']}, {'input': '4\\r\\n1 0 0\\r\\n0 1 0\\r\\n-1 0 0\\r\\n0 -1 0\\r\\n1 0 0\\r\\n10 5\\r\\n9 0 -8\\r\\n', 'output': ['YES\\r\\n1.1313708499\\r\\n1.0000000000 0.0000000000 0.0000000000\\r\\n']}, {'input': '5\\r\\n32 -5 -42\\r\\n-25 -38 -6\\r\\n-13 41 25\\r\\n21 -25 -32\\r\\n43 35 -19\\r\\n-38 -12 -48\\r\\n3 2\\r\\n182 -210 32\\r\\n', 'output': ['YES\\r\\n97.5061769956\\r\\n-0.5611252637 16.8539490414 4.1465923539\\r\\n']}, {'input': '10\\r\\n-20 28 4\\r\\n-12 -34 49\\r\\n3 -11 25\\r\\n-35 -46 25\\r\\n4 29 -15\\r\\n17 16 -10\\r\\n40 -35 16\\r\\n-15 -25 10\\r\\n-2 40 20\\r\\n-26 18 -49\\r\\n14 8 -44\\r\\n3 1\\r\\n-877 450 899\\r\\n', 'output': ['YES\\r\\n437.7804049730\\r\\n-6.8291526407 15.8542367965 16.2852671995\\r\\n']}, {'input': '1\\r\\n5 -22 -3\\r\\n31 -41 -35\\r\\n4 4\\r\\n139 -86 -115\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n-34 37 40\\r\\n24 -28 7\\r\\n-20 -14 -25\\r\\n1 1\\r\\n-69 -28 -70\\r\\n', 'output': ['YES\\r\\n107.2130636667\\r\\n12.9900466281 -24.4968330180 -1.0072388159\\r\\n']}, {'input': '3\\r\\n-38 -39 -19\\r\\n-49 -16 50\\r\\n-3 -7 5\\r\\n28 -15 41\\r\\n1 1\\r\\n-100 -139 -33\\r\\n', 'output': ['NO\\r\\n']}, {'input': '15\\r\\n-17 -8 7\\r\\n-50 -28 8\\r\\n13 -38 -17\\r\\n27 -49 15\\r\\n34 49 17\\r\\n-17 36 25\\r\\n-10 -15 28\\r\\n-15 -36 32\\r\\n-8 47 26\\r\\n-19 18 -25\\r\\n44 36 -16\\r\\n4 -46 49\\r\\n46 20 -13\\r\\n21 -37 -8\\r\\n35 -38 -26\\r\\n-26 46 12\\r\\n4 1\\r\\n-1693 1363 2149\\r\\n', 'output': ['YES\\r\\n768.5953048926\\r\\n37.0198725921 5.8883712161 0.2563785546\\r\\n']}, {'input': '20\\r\\n26 47 23\\r\\n1 -2 17\\r\\n-14 -22 46\\r\\n19 34 -18\\r\\n22 -10 -34\\r\\n15 14 -48\\r\\n-30 -12 -12\\r\\n-23 40 -48\\r\\n-50 -41 -35\\r\\n48 -5 46\\r\\n-2 -11 10\\r\\n-49 47 -15\\r\\n31 6 10\\r\\n-41 35 15\\r\\n28 28 25\\r\\n43 -7 -10\\r\\n-19 -48 49\\r\\n-10 -29 28\\r\\n0 -10 28\\r\\n41 12 -26\\r\\n-14 40 17\\r\\n3 2\\r\\n-115 1407 1434\\r\\n', 'output': ['YES\\r\\n659.9757793192\\r\\n-5.2872973659 35.5644422954 10.1882506679\\r\\n']}, {'input': '1\\r\\n0 0 0\\r\\n0 0 1\\r\\n10000 10000\\r\\n0 0 1\\r\\n', 'output': ['YES\\r\\n0.0000500000\\r\\n0.0000000000 0.0000000000 0.5000000000\\r\\n']}, {'input': '1\\r\\n10000 -10000 10000\\r\\n-10000 10000 -10000\\r\\n1 1\\r\\n10000 10000 10000\\r\\n', 'output': ['YES\\r\\n17320.5080756888\\r\\n0.0000000000 0.0000000000 0.0000000000\\r\\n']}, {'input': '1\\r\\n10000 -10000 10000\\r\\n-10000 10000 -10000\\r\\n10000 1\\r\\n10000 10000 10000\\r\\n', 'output': ['YES\\r\\n1.9998845433\\r\\n9998.8453661206 -9998.8453661206 9998.8453661206\\r\\n']}, {'input': '1\\r\\n0 0 -1\\r\\n0 0 1\\r\\n10000 1\\r\\n0 0 10000\\r\\n', 'output': ['YES\\r\\n1.0000000000\\r\\n0.0000000000 0.0000000000 0.0000000000\\r\\n']}, {'input': '1\\r\\n0 0 0\\r\\n-1 0 0\\r\\n10000 1\\r\\n10000 0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n10000 10000 10000\\r\\n10000 10000 -10000\\r\\n10000 -10000 -10000\\r\\n1 1\\r\\n-10000 -10000 10000\\r\\n', 'output': ['YES\\r\\n30000.0000000000\\r\\n10000.0000000000 0.0000000000 -10000.0000000000\\r\\n']}, {'input': '4\\r\\n10000 9999 10000\\r\\n10000 9999 9999\\r\\n10000 10000 9999\\r\\n10000 10000 10000\\r\\n10000 9999 10000\\r\\n10000 1\\r\\n-10000 -10000 -10000\\r\\n', 'output': ['YES\\r\\n3.4640748220\\r\\n10000.0000000000 9999.5359251780 10000.0000000000\\r\\n']}, {'input': '3\\r\\n10000 9999 10000\\r\\n10000 9999 9999\\r\\n10000 10000 9999\\r\\n10000 10000 10000\\r\\n10000 1\\r\\n-10000 -10000 -10000\\r\\n', 'output': ['NO\\r\\n']}]", "id": 172, "lang": "python2", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "Professor Phunsuk Wangdu has performed some experiments on rays. The setup for n rays is as follows.There is a rectangular box having exactly n holes on the opposite faces. All rays enter from the holes of the first side and exit from the holes of the other side of the box. Exactly one ray can enter or exit from each hole. The holes are in a straight line.  Professor Wangdu is showing his experiment to his students. He shows that there are cases, when all the rays are intersected by every other ray. A curious student asked the professor: \"Sir, there are some groups of rays such that all rays in that group intersect every other ray in that group. Can we determine the number of rays in the largest of such groups?\".Professor Wangdu now is in trouble and knowing your intellect he asks you to help him.", "input_specification": "The first line contains n (1\u2009\u2264\u2009n\u2009\u2264\u2009106), the number of rays. The second line contains n distinct integers. The i-th integer xi (1\u2009\u2264\u2009xi\u2009\u2264\u2009n) shows that the xi-th ray enters from the i-th hole. Similarly, third line contains n distinct integers. The i-th integer yi (1\u2009\u2264\u2009yi\u2009\u2264\u2009n) shows that the yi-th ray exits from the i-th hole. All rays are numbered from 1 to n. ", "output_specification": "Output contains the only integer which is the number of rays in the largest group of rays all of which intersect each other.", "notes": "NoteFor the first test case, the figure is shown above. The output of the first test case is 3, since the rays number 1, 4 and 3 are the ones which are intersected by each other one i.e. 1 is intersected by 4 and 3, 3 is intersected by 4 and 1, and 4 is intersected by 1 and 3. Hence every ray in this group is intersected by each other one. There does not exist any group containing more than 3 rays satisfying the above-mentioned constraint.", "sample_inputs": ["5\n1 4 5 2 3\n3 4 2 1 5", "3\n3 1 2\n2 3 1"], "sample_outputs": ["3", "2"], "src_uid": "b0ef9cda01a01cad22e7f4c49e74e85c", "lang_cluster": "Python", "difficulty": 1900, "human_solution": "from bisect import bisect_left as bl\nI=10000000\nn=int(input())+1\nc=[0]*n\nfor i,x in enumerate(map(int,input().split())): c[x]=i\nd = [n-c[int(x)] for x in input().split()]\nc=[I]*n\nfor i in d: c[bl(c,i)]=i\nprint( c.index(I))", "testcases": "[{'input': '5\\r\\n1 4 5 2 3\\r\\n3 4 2 1 5\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n3 1 2\\r\\n2 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n1 2 4 5 3\\r\\n1 5 4 2 3\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n3 1 2\\r\\n1 3 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '7\\r\\n1 5 2 7 4 3 6\\r\\n6 3 1 2 5 4 7\\r\\n', 'output': ['4\\r\\n']}, {'input': '4\\r\\n1 4 2 3\\r\\n2 3 1 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4\\r\\n2 4 1 3\\r\\n2 3 1 4\\r\\n', 'output': ['3\\r\\n']}, {'input': '10\\r\\n4 7 8 1 2 3 5 9 6 10\\r\\n6 3 8 7 10 2 1 4 5 9\\r\\n', 'output': ['5\\r\\n']}, {'input': '7\\r\\n1 5 7 2 4 3 6\\r\\n3 2 5 7 6 1 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '9\\r\\n1 7 4 9 3 8 2 5 6\\r\\n8 4 7 1 3 2 9 6 5\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n1 4 5 2 3\\r\\n3 4 2 1 5\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n2 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n1 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n2 1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n1 3 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n3 2 1\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n1 2 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\n1\\r\\n1\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 2 5 3 4\\r\\n3 5 4 2 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n5 3 2 4 1\\r\\n2 4 5 1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n1 2 4 5 3\\r\\n1 2 5 4 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n1 2 3 4 5\\r\\n1 2 3 4 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n5 4 3 2 1\\r\\n1 2 3 4 5\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n1 3 5 4 2\\r\\n1 4 5 3 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n1 5 2 4 3\\r\\n4 3 2 5 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '25\\r\\n21 19 25 9 24 23 20 18 16 22 17 7 4 15 13 11 2 3 10 12 14 6 8 5 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\\r\\n', 'output': ['13\\r\\n']}, {'input': '30\\r\\n30 29 28 27 26 25 19 24 9 23 21 20 18 16 22 17 7 4 15 13 11 2 3 10 12 14 6 8 5 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\\r\\n', 'output': ['19\\r\\n']}, {'input': '40\\r\\n40 27 29 39 30 34 28 26 25 38 19 32 24 9 37 23 21 20 18 33 36 16 22 35 17 7 4 15 31 13 11 2 3 10 12 14 6 8 5 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\\r\\n', 'output': ['19\\r\\n']}, {'input': '45\\r\\n45 44 40 43 27 29 41 39 30 34 28 26 25 42 38 19 32 24 9 37 23 21 20 18 33 36 16 22 35 17 7 4 15 31 13 11 2 3 10 12 14 6 8 5 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\\r\\n', 'output': ['22\\r\\n']}, {'input': '1\\r\\n1\\r\\n1\\r\\n', 'output': ['1\\r\\n']}]", "id": 173, "lang": "python3", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "Vasya\u2019s elder brother Petya loves playing computer games. In one of his favourite computer games Petya reached the final level where a fight with the boss take place.While playing the game Petya found spell scrolls and now he is about to use them. Let\u2019s describe the way fighting goes on this level:1) The boss has two parameters: max \u2014 the initial amount of health and reg \u2014 regeneration rate per second.2) Every scroll also has two parameters: powi \u2014 spell power measured in percents \u2014 the maximal amount of health counted off the initial one, which allows to use the scroll (i.e. if the boss has more than powi percent of health the scroll cannot be used); and dmgi the damage per second inflicted upon the boss if the scroll is used. As soon as a scroll is used it disappears and another spell is cast upon the boss that inflicts dmgi of damage per second upon him until the end of the game.During the battle the actions per second are performed in the following order: first the boss gets the damage from all the spells cast upon him, then he regenerates reg of health (at the same time he can\u2019t have more than max of health), then the player may use another scroll (no more than one per second).The boss is considered to be defeated if at the end of a second he has nonpositive (\u2009\u2264\u20090) amount of health.Help Petya to determine whether he can win with the set of scrolls available to him and if he can, determine the minimal number of seconds he needs to do it.", "input_specification": "The first line contains three integers N, max and reg (1\u2009\u2264\u2009N,\u2009max,\u2009reg\u2009\u2264\u20091000) \u2013\u2013 the amount of scrolls and the parameters of the boss. The next N lines contain two integers powi and dmgi each \u2014 the parameters of the i-th scroll (0\u2009\u2264\u2009powi\u2009\u2264\u2009100, 1\u2009\u2264\u2009dmgi\u2009\u2264\u20092000). ", "output_specification": "In case Petya can\u2019t complete this level, output in the single line NO. Otherwise, output on the first line YES. On the second line output the minimal time after which the boss can be defeated and the number of used scrolls. In the next lines for each used scroll output space-separated number of seconds passed from the start of the battle to the moment the scroll was used and the number of the scroll. Scrolls are numbered starting from 1 in the input order. The first scroll is considered to be available to be used after 0 seconds. Output scrolls in the order they were used. It is not allowed to use scrolls after the boss is defeated.", "notes": null, "sample_inputs": ["2 10 3\n100 3\n99 1", "2 100 10\n100 11\n90 9"], "sample_outputs": ["NO", "YES\n19 2\n0 1\n10 2"], "src_uid": "e9c486e2d942700e0644dff29b6e3be6", "lang_cluster": "Python", "difficulty": 1800, "human_solution": "class Scroll:\n\tdef __init__(self, id, power, damage):\n\t\tself.id = id\n\t\tself.power = power\n\t\tself.damage = damage\n\t\tself.active = False\n\nnum_scrolls, boss_max, regenerate = map(int, input().split())\nscrolls = [Scroll(i+1, *map(int, input().split())) for i in range(num_scrolls)]\nscrolls.sort(key = lambda scroll: -scroll.damage)\nboss_curr = boss_max\nscroll_damage = 0\nactive_scrolls = []\ntick = 0\nwhile True:\n\tboss_prev = boss_curr\n\tboss_curr -= scroll_damage\n\tboss_curr = min(boss_max, boss_curr + regenerate)\n\tif boss_curr <= 0:\n\t\tprint('YES')\n\t\tprint(tick, len(active_scrolls))\n\t\tfor scroll in active_scrolls:\n\t\t\tprint(scroll.start, scroll.id)\n\t\tbreak\n\tfound = False\n\tfor scroll in scrolls:\n\t\tif not scroll.active and 100*boss_curr <= scroll.power*boss_max:\n\t\t\tscroll.start = tick\n\t\t\tscroll.active = True\n\t\t\tactive_scrolls.append(scroll)\n\t\t\tscroll_damage += scroll.damage\n\t\t\tfound = True\n\t\t\tbreak\n\tif not found and boss_curr >= boss_prev:\n\t\tprint('NO')\n\t\tbreak\n\ttick += 1\n", "testcases": "[{'input': '2 10 3\\r\\n100 3\\r\\n99 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 100 10\\r\\n100 11\\r\\n90 9\\r\\n', 'output': ['YES\\r\\n19 2\\r\\n0 1\\r\\n10 2\\r\\n']}, {'input': '10 100 5\\r\\n61 3\\r\\n55 2\\r\\n12 6\\r\\n39 5\\r\\n21 10\\r\\n39 7\\r\\n16 1\\r\\n10 1\\r\\n70 5\\r\\n100 7\\r\\n', 'output': ['YES\\r\\n21 6\\r\\n0 10\\r\\n15 9\\r\\n17 1\\r\\n18 2\\r\\n19 6\\r\\n20 5\\r\\n']}, {'input': '20 1000 35\\r\\n10 6\\r\\n66 38\\r\\n81 11\\r\\n18 46\\r\\n80 54\\r\\n76 55\\r\\n100 7\\r\\n96 23\\r\\n24 37\\r\\n4 24\\r\\n4 50\\r\\n71 4\\r\\n83 15\\r\\n7 23\\r\\n100 44\\r\\n99 34\\r\\n100 17\\r\\n100 66\\r\\n23 15\\r\\n90 35\\r\\n', 'output': ['YES\\r\\n7 7\\r\\n0 18\\r\\n1 15\\r\\n2 20\\r\\n3 5\\r\\n4 6\\r\\n5 2\\r\\n6 4\\r\\n']}, {'input': '20 1000 100\\r\\n49 26\\r\\n46 36\\r\\n1 114\\r\\n80 4\\r\\n80 125\\r\\n100 17\\r\\n6 184\\r\\n100 20\\r\\n59 60\\r\\n47 92\\r\\n52 20\\r\\n44 50\\r\\n3 15\\r\\n10 192\\r\\n6 13\\r\\n60 3\\r\\n63 102\\r\\n78 17\\r\\n0 124\\r\\n31 100\\r\\n', 'output': ['NO\\r\\n']}, {'input': '35 999 199\\r\\n95 80\\r\\n79 279\\r\\n14 291\\r\\n100 88\\r\\n64 55\\r\\n100 209\\r\\n85 4\\r\\n14 237\\r\\n75 126\\r\\n41 260\\r\\n81 67\\r\\n99 311\\r\\n71 220\\r\\n98 312\\r\\n53 213\\r\\n55 377\\r\\n78 374\\r\\n79 308\\r\\n34 40\\r\\n92 281\\r\\n53 119\\r\\n96 170\\r\\n90 7\\r\\n87 176\\r\\n27 50\\r\\n78 95\\r\\n31 327\\r\\n56 138\\r\\n91 221\\r\\n7 144\\r\\n100 335\\r\\n29 139\\r\\n61 247\\r\\n38 203\\r\\n100 242\\r\\n', 'output': ['YES\\r\\n3 3\\r\\n0 31\\r\\n1 14\\r\\n2 16\\r\\n']}, {'input': '50 1000 17\\r\\n26 1\\r\\n96 22\\r\\n100 27\\r\\n99 30\\r\\n97 5\\r\\n39 14\\r\\n100 17\\r\\n100 8\\r\\n98 21\\r\\n100 17\\r\\n100 34\\r\\n75 11\\r\\n68 31\\r\\n100 13\\r\\n3 5\\r\\n74 4\\r\\n100 12\\r\\n100 25\\r\\n100 32\\r\\n3 14\\r\\n100 10\\r\\n100 2\\r\\n75 28\\r\\n24 16\\r\\n27 20\\r\\n34 13\\r\\n64 29\\r\\n50 19\\r\\n90 22\\r\\n42 7\\r\\n48 12\\r\\n97 34\\r\\n22 1\\r\\n57 33\\r\\n100 13\\r\\n100 31\\r\\n61 12\\r\\n100 18\\r\\n64 19\\r\\n29 24\\r\\n100 33\\r\\n87 10\\r\\n35 33\\r\\n77 28\\r\\n100 15\\r\\n87 34\\r\\n68 2\\r\\n44 29\\r\\n55 3\\r\\n41 5\\r\\n', 'output': ['YES\\r\\n8 8\\r\\n0 11\\r\\n1 41\\r\\n2 32\\r\\n3 46\\r\\n4 19\\r\\n5 13\\r\\n6 34\\r\\n7 43\\r\\n']}, {'input': '70 1000 1\\r\\n91 2\\r\\n43 1\\r\\n100 1\\r\\n79 2\\r\\n26 1\\r\\n68 2\\r\\n4 2\\r\\n64 1\\r\\n100 1\\r\\n80 2\\r\\n20 2\\r\\n70 1\\r\\n25 1\\r\\n99 1\\r\\n64 1\\r\\n35 2\\r\\n60 1\\r\\n63 2\\r\\n93 1\\r\\n40 2\\r\\n100 1\\r\\n54 1\\r\\n100 1\\r\\n15 2\\r\\n72 1\\r\\n28 1\\r\\n5 1\\r\\n93 1\\r\\n100 2\\r\\n39 2\\r\\n54 2\\r\\n100 1\\r\\n55 1\\r\\n43 1\\r\\n20 1\\r\\n28 2\\r\\n21 1\\r\\n100 2\\r\\n98 1\\r\\n35 1\\r\\n12 2\\r\\n50 2\\r\\n7 2\\r\\n7 2\\r\\n12 2\\r\\n100 2\\r\\n44 1\\r\\n40 2\\r\\n56 2\\r\\n5 1\\r\\n100 1\\r\\n94 2\\r\\n100 2\\r\\n74 1\\r\\n83 2\\r\\n100 2\\r\\n81 2\\r\\n37 2\\r\\n29 1\\r\\n100 2\\r\\n99 1\\r\\n39 2\\r\\n83 2\\r\\n96 2\\r\\n30 2\\r\\n39 1\\r\\n38 1\\r\\n51 1\\r\\n11 1\\r\\n100 2\\r\\n', 'output': ['YES\\r\\n34 34\\r\\n0 29\\r\\n1 38\\r\\n2 46\\r\\n3 53\\r\\n4 56\\r\\n5 60\\r\\n6 70\\r\\n7 64\\r\\n8 52\\r\\n9 3\\r\\n10 1\\r\\n11 9\\r\\n12 14\\r\\n13 19\\r\\n14 55\\r\\n15 4\\r\\n16 10\\r\\n17 57\\r\\n18 63\\r\\n19 6\\r\\n20 8\\r\\n21 18\\r\\n22 12\\r\\n23 31\\r\\n24 42\\r\\n25 49\\r\\n26 20\\r\\n27 16\\r\\n28 30\\r\\n29 36\\r\\n30 11\\r\\n31 24\\r\\n32 41\\r\\n33 7\\r\\n']}, {'input': '4 660 722\\r\\n67 360\\r\\n96 778\\r\\n6 1041\\r\\n62 395\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 328 249\\r\\n62 265\\r\\n32 271\\r\\n72 237\\r\\n28 99\\r\\n22 364\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 351 183\\r\\n16 337\\r\\n19 221\\r\\n81 359\\r\\n87 253\\r\\n5 240\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 439 283\\r\\n25 510\\r\\n31 547\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4 337 873\\r\\n62 81\\r\\n87 481\\r\\n39 1189\\r\\n45 450\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 940 591\\r\\n92 762\\r\\n59 255\\r\\n15 1061\\r\\n53 1016\\r\\n10 527\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 851 931\\r\\n88 401\\r\\n48 1196\\r\\n86 1817\\r\\n20 1575\\r\\n30 1474\\r\\n', 'output': ['NO\\r\\n']}, {'input': '29 634 982\\r\\n60 1351\\r\\n54 640\\r\\n1 253\\r\\n72 24\\r\\n40 529\\r\\n52 339\\r\\n73 21\\r\\n34 1284\\r\\n32 1264\\r\\n76 1346\\r\\n92 320\\r\\n11 1441\\r\\n67 1215\\r\\n69 1524\\r\\n77 1672\\r\\n83 412\\r\\n48 241\\r\\n25 894\\r\\n91 1474\\r\\n18 1743\\r\\n98 1944\\r\\n48 788\\r\\n77 860\\r\\n31 629\\r\\n91 1042\\r\\n36 1116\\r\\n41 1162\\r\\n63 129\\r\\n15 1125\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 1000 8\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['YES\\r\\n509 10\\r\\n0 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n8 9\\r\\n9 10\\r\\n']}, {'input': '11 2 10\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['YES\\r\\n12 11\\r\\n0 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n8 9\\r\\n9 10\\r\\n10 11\\r\\n']}, {'input': '3 200 10\\r\\n100 3\\r\\n100 8\\r\\n50 1000\\r\\n', 'output': ['YES\\r\\n102 3\\r\\n0 2\\r\\n1 1\\r\\n101 3\\r\\n']}, {'input': '2 100 2\\r\\n100 2\\r\\n100 2\\r\\n', 'output': ['YES\\r\\n51 2\\r\\n0 1\\r\\n1 2\\r\\n']}, {'input': '2 1000 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['YES\\r\\n1001 2\\r\\n0 1\\r\\n1 2\\r\\n']}, {'input': '6 1000 53\\r\\n100 10\\r\\n100 10\\r\\n100 10\\r\\n100 10\\r\\n100 10\\r\\n100 10\\r\\n', 'output': ['YES\\r\\n148 6\\r\\n0 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n']}, {'input': '3 100 2\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['YES\\r\\n102 3\\r\\n0 1\\r\\n1 2\\r\\n2 3\\r\\n']}, {'input': '3 100 3\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 100 4\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 100 5\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['NO\\r\\n']}]", "id": 174, "lang": "python3", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "Berland scientists noticed long ago that the world around them depends on Berland population. Due to persistent research in this area the scientists managed to find out that the Berland chronology starts from the moment when the first two people came to that land (it is considered to have happened in the first year). After one Berland year after the start of the chronology the population had already equaled 13 people (the second year). However, tracing the population number during the following years was an ultimately difficult task, still it was found out that if di \u2014 the number of people in Berland in the year of i, then either di\u2009=\u200912di\u2009-\u20092, or di\u2009=\u200913di\u2009-\u20091\u2009-\u200912di\u2009-\u20092. Of course no one knows how many people are living in Berland at the moment, but now we can tell if there could possibly be a year in which the country population equaled A. That's what we ask you to determine. Also, if possible, you have to find out in which years it could be (from the beginning of Berland chronology). Let's suppose that it could be in the years of a1,\u2009a2,\u2009...,\u2009ak. Then you have to define how many residents could be in the country during those years apart from the A variant. Look at the examples for further explanation.", "input_specification": "The first line contains integer A (1\u2009\u2264\u2009A\u2009&lt;\u200910300). It is guaranteed that the number doesn't contain leading zeros.", "output_specification": "On the first output line print YES, if there could be a year in which the total population of the country equaled A, otherwise print NO.  If the answer is YES, then you also have to print number k \u2014 the number of years in which the population could equal A. On the next line you have to output precisely k space-separated numbers \u2014 a1,\u2009a2,\u2009...,\u2009ak. Those numbers have to be output in the increasing order. On the next line you should output number p \u2014 how many variants of the number of people could be in the years of a1,\u2009a2,\u2009...,\u2009ak, apart from the A variant. On each of the next p lines you have to print one number \u2014 the sought number of residents. Those number also have to go in the increasing order.  If any number (or both of them) k or p exceeds 1000, then you have to print 1000 instead of it and only the first 1000 possible answers in the increasing order. The numbers should have no leading zeros.", "notes": null, "sample_inputs": ["2", "3", "13", "1729"], "sample_outputs": ["YES\n1\n1\n0", "NO", "YES\n1\n2\n0", "YES\n1\n4\n1\n156"], "src_uid": "0ef5e0621f13107d0c8786766ae2ac56", "lang_cluster": "Python", "difficulty": 2600, "human_solution": "a = int(input())\nans = set()\ndef work(i, z, y):\n    z.add(y)\n    # print(\">>\", i, y)\n    if y == a:\n        ans.add(i)\n    if len(z) > 1000:\n        z.remove(max(z))\n\npos = [set(), set([2])]\nfor i in range(2):\n    for x in pos[i]:\n        if x == a:\n            ans.add(i)\n\ndef dfs(i, last, cur):\n    if i > 988:\n        return\n    while len(pos) - 1 < i:\n        pos.append(set())\n    if len(pos[i]) == 0 and cur > a:\n        return\n    if cur in pos[i]:\n        return\n    work(i, pos[i], cur)\n    dfs(i + 1, cur, last * 12)\n    dfs(i + 1, cur, cur * 13 - last * 12)\n\ndfs(2, 2, 13)\n\nif len(ans) == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    count = 0\n    print(min(1000, len(ans)))\n    z = set()\n    for i in sorted(ans):\n        if count < 1000:\n            print(i)\n            count += 1\n        for y in pos[i]:\n            if y != a:\n                z.add(y)\n            if len(z) > 1000:\n                z.remove(max(z))\n    count = 0\n    print(min(1000, len(z)))\n    for i in sorted(z):\n        print(i)\n        count += 1\n        if count >= 1000:\n            break", "testcases": "[{'input': '2\\r\\n', 'output': ['YES\\r\\n1\\r\\n1\\r\\n0\\r\\n']}, {'input': '3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '13\\r\\n', 'output': ['YES\\r\\n1\\r\\n2\\r\\n0\\r\\n']}, {'input': '1729\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n156\\r\\n']}, {'input': '1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '156\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n1729\\r\\n']}, {'input': '144\\r\\n', 'output': ['NO\\r\\n']}, {'input': '15407021574586369\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n']}, {'input': '1283918464548876\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n15407021574586369\\r\\n']}, {'input': '106993205379216\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '8916100449984\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '743008391424\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '61917613056\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '5162766336\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '465813504\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '1190892770349870530939783612223854919520376583681977765887915460625605936058755310651852367291739265953207545289130222590192089760107219016552443777446454737593270848929686985225627328165141495957916933183554147885929489200931370369335342990301385609877410822418323040587200691179244114277235163137\\r\\n', 'output': ['NO\\r\\n']}, {'input': '595446385174935265469891806111927459760188291840988882943957730312802968029377655325926183645869632976603772644565111295096044880053609508276221888723227368796635424464843492612813664082570747978958466591777073942964744600465685184667671495150692804938705411209161520293600345589622057138617581568\\r\\n', 'output': ['NO\\r\\n']}, {'input': '25\\r\\n', 'output': ['NO\\r\\n']}, {'input': '941796563564014133460267652699405064136604147775680640408635568423120076418612383600961606320075481457728632621229496557902028935524874377670656752361237195740789199168688114539822313589449591752852405348364368488613997844015773837981050319855641810991084718329572826001220219\\r\\n', 'output': ['NO\\r\\n']}, {'input': '79360359146807441660707083821018832188095237636414144034857851003419752010124705615779249215657075053438039921073878645370211154334804568157886814559909\\r\\n', 'output': ['NO\\r\\n']}, {'input': '63730052926382178992698271572\\r\\n', 'output': ['NO\\r\\n']}, {'input': '781127467969689863953686682245136076127159921705034542049372816247984349746396880068864077830521695515007722284098436125466526268962707778595903329840419133974864831578401355678018910046595664462\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6158324958633591462725987806787114657822761584945953440793358408\\r\\n', 'output': ['NO\\r\\n']}, {'input': '46865942276811740149949176718949673344632458696505595472917789224885825949034661409971763949176343056701403524645790892802371117466746709730235969308113002256137529699677021858777002204698794034488631496662175642982367736619451227\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30237645054497458443810364460387991000047179363449854478913094584184671326397148735574822623728870964468880\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2340834982489248497640077401144544875656219324259480464300721974528452789353163588007890141857933775490305682107276886017882071992830194933217950703328428111517059826130590646975303231172522274173055168264136989194405810785131454927884294753122224538370897882934059\\r\\n', 'output': ['NO\\r\\n']}, {'input': '188808426143782131983811729737047667239979348184409855460833141044812532916921011366813880911319644625405122800255947507577498497005580408229\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n', 'output': ['NO\\r\\n']}, {'input': '837952166310387766556098005402621146120844433859027080340550200820\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6658370691480968202384509492140362150472696196949673577340706113760133821635599667476781507918250717914609488172442814676\\r\\n', 'output': ['NO\\r\\n']}, {'input': '496620932866717074931903995027173085744596193421095444317407919730992986418713478580824584919587030125446806223296721174921873955469939680411818878465888018986191990428049489376\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1055050055824280186133547527395898666709023463559337207019374080060005629519967890329878081184599905695126755199503698703340223998620951421943134090897041663457029971964336512111472968057533187306110300592753045593222495258017559167383354672\\r\\n', 'output': ['NO\\r\\n']}, {'input': '833488\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6623739799588591251984406341341227075747347067457011846886851179047097\\r\\n', 'output': ['NO\\r\\n']}, {'input': '491137842784568289872893698937459777201151060689848471272003426250808340375567208957554901863756992593841404624991936090178731\\r\\n', 'output': ['NO\\r\\n']}, {'input': '921020945402270233565256424740666649108666245414796768645533036514715926608741510409618545180420952947917462937925573726593991655435868735899832746218676826629010574075553051352459309199055\\r\\n', 'output': ['NO\\r\\n']}, {'input': '73010581613999159726778758153209240813500342925961695523976131595080552126499402124287397930918281238199343324378719343080627189983992629778313739785259010389762036264197722427990331444297391895841265448905560880286941336214995793596526089977876\\r\\n', 'output': ['NO\\r\\n']}, {'input': '20046142930690780976270827075270\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9685166910821197056344900917707673568669808490600751439157007968027004377622601634787545920946543261243701428886581331490848676434786296227674864970612484770201\\r\\n', 'output': ['NO\\r\\n']}, {'input': '8135498415686025907059626116077260223347794805104214588176486213766836727225732896611278946787711775240855660997946707132990500568944980168321229607627861318462551364491230037357687242571268657488824365976425738641613571689437917277074234256494445914221354904615014917288299991097350709814\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4805043123239964766764344326469867688727869311599746349016084457204677169811854267718990063526979167327981002200329174783850464\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2376595620091080825479292544658464163405755746884100218035485700973409491416884420742631899446144679322008453313773241425622490028383089317622842863337164723765526589656211098933400307364163919083790470365474085981340438888606855706394352678991102\\r\\n', 'output': ['NO\\r\\n']}, {'input': '99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}, {'input': '145\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n24\\r\\n']}, {'input': '24\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n145\\r\\n']}, {'input': '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}]", "id": 175, "lang": "python3", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "Vasya tries to break in a safe. He knows that a code consists of n numbers, and every number is a 0 or a 1. Vasya has made m attempts to enter the code. After each attempt the system told him in how many position stand the right numbers. It is not said in which positions the wrong numbers stand. Vasya has been so unlucky that he hasn\u2019t entered the code where would be more than 5 correct numbers. Now Vasya is completely bewildered: he thinks there\u2019s a mistake in the system and it is self-contradictory. Help Vasya \u2014 calculate how many possible code variants are left that do not contradict the previous system responses.", "input_specification": "The first input line contains two integers n and m (6\u2009\u2264\u2009n\u2009\u2264\u200935,\u20091\u2009\u2264\u2009m\u2009\u2264\u200910) which represent the number of numbers in the code and the number of attempts made by Vasya. Then follow m lines, each containing space-separated si and ci which correspondingly indicate Vasya\u2019s attempt (a line containing n numbers which are 0 or 1) and the system\u2019s response (an integer from 0 to 5 inclusively).", "output_specification": "Print the single number which indicates how many possible code variants that do not contradict the m system responses are left.", "notes": null, "sample_inputs": ["6 2\n000000 2\n010100 4", "6 3\n000000 2\n010100 4\n111100 0", "6 3\n000000 2\n010100 4\n111100 2"], "sample_outputs": ["6", "0", "1"], "src_uid": "5215112549723fea3f2c1fe0049e0b2e", "lang_cluster": "Python", "difficulty": 2200, "human_solution": "from itertools import combinations\n\ndef calculate(s, dif):\n\tx = int(s, 2)\n\tfor j in combinations(range(len(s)), dif):\n\t\ty = x\n\t\tfor k in j:\n\t\t\ty ^= (2**k)\n\t\tyield y\n\ndef calculate2(s, dif, arr):\n\ty = int(s, 2)\n\tfor x in arr:\n\t    if(bin(y ^ x).count('1') == dif):\n\t        yield x\n\n\nn, m = map(int, input().split())\nresult = []\n(st, dif) = input().split()\ntotal = calculate(st, int(dif))\nfor i in range(1, m):\n\tst, dif = input().split()\n\ttotal = calculate2(st, int(dif), total)\n\nprint(len(list(total)))\n", "testcases": "[{'input': '6 2\\r\\n000000 2\\r\\n010100 4\\r\\n', 'output': ['6\\r\\n']}, {'input': '6 3\\r\\n000000 2\\r\\n010100 4\\r\\n111100 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '6 3\\r\\n000000 2\\r\\n010100 4\\r\\n111100 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '6 1\\r\\n101011 2\\r\\n', 'output': ['15\\r\\n']}, {'input': '7 2\\r\\n1011111 2\\r\\n1001111 1\\r\\n', 'output': ['6\\r\\n']}, {'input': '6 4\\r\\n000110 2\\r\\n010001 2\\r\\n001111 2\\r\\n001100 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '8 3\\r\\n00111100 5\\r\\n10100111 2\\r\\n10110101 2\\r\\n', 'output': ['6\\r\\n']}, {'input': '35 10\\r\\n10010111001010111001011111000111111 1\\r\\n10100111001010100001111111010111111 5\\r\\n10010111001011110001001111010111110 4\\r\\n10010111001010011011011111010110111 3\\r\\n10010111001010111011011111010111111 1\\r\\n10110011001010111011011111010111111 3\\r\\n10010110001011111001011111010111111 2\\r\\n10000111000010111001111101000111111 5\\r\\n10010111000010011001011111010111111 2\\r\\n10010111001010111001011111000111111 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n11110011011000001101011101111100000 5\\r\\n01000011011001101101011101011101010 5\\r\\n11110011011000001101011101000101011 5\\r\\n11000011011101101101011111010001000 5\\r\\n10100011011001101101001101010101001 4\\r\\n11110011111000100101011101110001000 5\\r\\n01100111011000101101001101010101100 4\\r\\n11110001011000101111011101010101000 3\\r\\n11110010011010101100011101010101000 4\\r\\n10100011011000111101011101111101010 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n11101100001010011101100010101111111 5\\r\\n11101100010011101100001010101011011 5\\r\\n11101100001101111110000011101111010 5\\r\\n11101100101001111100000110111111001 5\\r\\n11101100001011000100001011101111011 5\\r\\n10101000001011111010000010001111011 5\\r\\n11101100001011111100010000111110001 5\\r\\n11101000001111111100000010101001010 5\\r\\n11101001001010101100100010101111011 5\\r\\n11100100001011111100010010001101010 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n10011011100001001101101001100011001 5\\r\\n10011011111001001101001010100011101 3\\r\\n11001011101101001101101010000000101 5\\r\\n10011011101001001101111010100001111 4\\r\\n10011011101001001101111010110011001 4\\r\\n10111001100001001101101010000011101 3\\r\\n10011011101001001101001010000101101 3\\r\\n10110011101001001100101010000011100 4\\r\\n00011110101001001101101011000011101 4\\r\\n10011111101001011101101010000001101 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n10000111101101011000011000011001110 5\\r\\n11010110010101011000111000111001110 5\\r\\n10011111111111011000110000011001110 5\\r\\n10000110110011011000111001001001110 5\\r\\n11100111110111001000111000001001011 5\\r\\n11101111110111001000011010011001110 5\\r\\n11000011110111001001111000110001110 5\\r\\n11010111111111011010111000111000110 5\\r\\n11100110010111011000111000110001110 5\\r\\n11000110110111111000101010011001111 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n01001110011001000001000010001101110 5\\r\\n01001101111011000001001000001000110 5\\r\\n01000101011000000011010000001100110 5\\r\\n00011101001001000011000001011100110 5\\r\\n11011111010001001011000000001100110 5\\r\\n01011100001011000001100000011100110 5\\r\\n00011101011011000100000100001100110 5\\r\\n01011101011000010001100000001100011 5\\r\\n01011001011011010001000000001110100 5\\r\\n01010101010001011001000000001110110 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n00101110001000011000011100001110011 5\\r\\n00111100011110011000011111111110010 5\\r\\n01101010011110111000011110100110010 5\\r\\n01101111010100011010011110101100010 5\\r\\n00101110011100011000010111011110011 5\\r\\n10001110111100011000111111101110010 5\\r\\n01101111011100010000010111101110010 5\\r\\n11101100011100011000010110101100010 5\\r\\n00101100011100011000011100001101010 5\\r\\n00100110011100011000011000111110000 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 1\\r\\n00001111001110101000001101100010010 5\\r\\n', 'output': ['324632\\r\\n']}, {'input': '30 10\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n', 'output': ['142506\\r\\n']}, {'input': '35 2\\r\\n00101101100111101110111010001101101 3\\r\\n00111111100101010110111010001101101 3\\r\\n', 'output': ['20\\r\\n']}, {'input': '35 1\\r\\n11000110100110101001100101001010110 2\\r\\n', 'output': ['595\\r\\n']}, {'input': '35 2\\r\\n00111111100000111101000110100111101 1\\r\\n00111111000000111101000010100111101 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '35 6\\r\\n01100100110000001001100110001100011 5\\r\\n10000100110000011001110010001100011 5\\r\\n00101110100000010000100010001110011 4\\r\\n00110010101000011001100000001110011 5\\r\\n00100101110000011001101110001110011 4\\r\\n00110110110000011001101000000100011 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '34 10\\r\\n0010101000011110000100111111010110 5\\r\\n0110011001011110001101110111000110 5\\r\\n0111001000011100000100111111110110 4\\r\\n0011011000001110100000110111010110 4\\r\\n0101011000011110000100010111010111 3\\r\\n0111011000011111010100111111010110 3\\r\\n0110010000011110000100110111010010 3\\r\\n0111011001111110000100110111010111 3\\r\\n1111111000011010000100110111010100 4\\r\\n1111001000011110000100110111001111 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '6 10\\r\\n110000 5\\r\\n010011 4\\r\\n110011 5\\r\\n110010 4\\r\\n000001 4\\r\\n010001 5\\r\\n110101 5\\r\\n110011 5\\r\\n110010 4\\r\\n011001 4\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n11001101010000101110001101101110111 4\\r\\n11010101010000101011001001110100110 5\\r\\n11000100010000101011001100100100110 4\\r\\n11000001000100101011001101101100110 4\\r\\n01000101000000101010011101101110010 5\\r\\n00000101010010001011001101101100110 5\\r\\n01000101010100101010001101100010110 5\\r\\n11000100010000010010001101101100110 4\\r\\n10000101010000100010000101101100111 4\\r\\n11001100010000100010011101101100110 4\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n01110001000111100010110001110110100 5\\r\\n01110001000000000010100001110100010 3\\r\\n01110000100100000010100001111110010 4\\r\\n11110001011110000010100001110111010 4\\r\\n01110101000111000010100001110110110 3\\r\\n10110001000100010010000001110110010 5\\r\\n01110011000111000011100001110110010 3\\r\\n00110001000110000011100001111110010 3\\r\\n01110011000010000110000001110111010 5\\r\\n11110001000110100010101001110110010 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n10011010100110011101110001101011011 2\\r\\n10111010100111011011110000101011011 3\\r\\n10011010101111001001110000111111011 5\\r\\n10011010100111011100110000100011011 2\\r\\n10011010100111001101010000101010011 3\\r\\n10010010101001011101110000101011111 5\\r\\n10011010100111010101110000100011011 2\\r\\n00011010100111011100110001101011111 4\\r\\n10011010100111011101110000111001011 2\\r\\n10010000000110011101110000101011011 4\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n10101100110000010101111100110001110 4\\r\\n10100110000110000101011100110001110 4\\r\\n10100110111110000101010100010001110 5\\r\\n11100100010000000101010100110000110 5\\r\\n10100010110000100101011100110001110 2\\r\\n10000110100000000100011100110001100 4\\r\\n10000110110000000001011100110101110 3\\r\\n10100010111000000101011101110000110 4\\r\\n10100100110000000111001100110001110 3\\r\\n10100110100000000101011101110001110 2\\r\\n', 'output': ['1\\r\\n']}]", "id": 176, "lang": "python3", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "In the town of Aalam-Aara (meaning the Light of the Earth), previously there was no crime, no criminals but as the time progressed, sins started creeping into the hearts of once righteous people. Seeking solution to the problem, some of the elders found that as long as the corrupted part of population was kept away from the uncorrupted part, the crimes could be stopped. So, they are trying to set up a compound where they can keep the corrupted people. To ensure that the criminals don't escape the compound, a watchtower needs to be set up, so that they can be watched.Since the people of Aalam-Aara aren't very rich, they met up with a merchant from some rich town who agreed to sell them a land-plot which has already a straight line fence AB along which a few points are set up where they can put up a watchtower. Your task is to help them find out the number of points on that fence where the tower can be put up, so that all the criminals can be watched from there. Only one watchtower can be set up. A criminal is watchable from the watchtower if the line of visibility from the watchtower to him doesn't cross the plot-edges at any point between him and the tower i.e. as shown in figure 1 below, points X, Y, C and A are visible from point B but the points E and D are not.    Figure 1     Figure 2 Assume that the land plot is in the shape of a polygon and coordinate axes have been setup such that the fence AB is parallel to x-axis and the points where the watchtower can be set up are the integer points on the line. For example, in given figure 2, watchtower can be setup on any of five integer points on AB i.e. (4,\u20098), (5,\u20098), (6,\u20098), (7,\u20098) or (8,\u20098). You can assume that no three consecutive points are collinear and all the corner points other than A and B, lie towards same side of fence AB. The given polygon doesn't contain self-intersections.", "input_specification": "The first line of the test case will consist of the number of vertices n (3\u2009\u2264\u2009n\u2009\u2264\u20091000). Next n lines will contain the coordinates of the vertices in the clockwise order of the polygon. On the i-th line are integers xi and yi (0\u2009\u2264\u2009xi,\u2009yi\u2009\u2264\u2009106) separated by a space. The endpoints of the fence AB are the first two points, (x1,\u2009y1) and (x2,\u2009y2).", "output_specification": "Output consists of a single line containing the number of points where the watchtower can be set up.", "notes": "NoteFigure 2 shows the first test case. All the points in the figure are watchable from any point on fence AB. Since, AB has 5 integer coordinates, so answer is 5.For case two, fence CD and DE are not completely visible, thus answer is 0.", "sample_inputs": ["5\n4 8\n8 8\n9 4\n4 0\n0 4", "5\n4 8\n5 8\n5 4\n7 4\n2 2"], "sample_outputs": ["5", "0"], "src_uid": "1503f0379bf8d7f25c191ddea9278842", "lang_cluster": "Python", "difficulty": 2500, "human_solution": "from math import floor,ceil\nn = input()\nx,y = zip(*[map(int,raw_input().split()) for _ in xrange(n)])\nnr,mr=min(x[:2]),max(x[:2])\nfor j in xrange(3,n):\n    i = j-1\n    dx = x[j]-x[i]\n    dy = y[j]-y[i]\n    t = 1.*(y[0]-y[i])*dx;\n    r = t/dy+x[i] if dy else 1e9\n    if t-dy*(mr-x[i])>0 and r<mr: mr=r;\n    if t-dy*(nr-x[i])>0 and r>nr: nr=r;\nmr = floor(mr)-ceil(nr)\nprint \"%.0f\"%(0. if mr<-1e-14 else mr+1.1)\n\n", "testcases": "[{'input': '5\\r\\n4 8\\r\\n8 8\\r\\n9 4\\r\\n4 0\\r\\n0 4\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n4 8\\r\\n5 8\\r\\n5 4\\r\\n7 4\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n0 4\\r\\n5 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n0 4\\r\\n5 4\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n100 200\\r\\n800 200\\r\\n500 100\\r\\n100 0\\r\\n', 'output': ['701\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n5 4\\r\\n2 2\\r\\n4 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n2 5\\r\\n5 5\\r\\n4 4\\r\\n5 3\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n11 7\\r\\n9 5\\r\\n5 7\\r\\n1 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n5 7\\r\\n11 7\\r\\n9 5\\r\\n1 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n10 150\\r\\n90 150\\r\\n10 15\\r\\n', 'output': ['81\\r\\n']}, {'input': '5\\r\\n0 100\\r\\n50 100\\r\\n50 99\\r\\n149 0\\r\\n0 0\\r\\n', 'output': ['50\\r\\n']}, {'input': '10\\r\\n1000 0\\r\\n100 0\\r\\n0 25\\r\\n100 50\\r\\n100 51\\r\\n99 102\\r\\n1001 102\\r\\n1000 51\\r\\n1000 50\\r\\n1100 25\\r\\n', 'output': ['899\\r\\n']}, {'input': '6\\r\\n1 1000000\\r\\n999999 1000000\\r\\n519023 50000\\r\\n520013 500\\r\\n300033 50\\r\\n400023 500000\\r\\n', 'output': ['1\\r\\n']}, {'input': '8\\r\\n100 100\\r\\n10 100\\r\\n0 200\\r\\n5 400\\r\\n20 800\\r\\n16 801\\r\\n50 900\\r\\n110 300\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n588523 0\\r\\n411477 0\\r\\n400000 86602\\r\\n', 'output': ['177047\\r\\n']}, {'input': '15\\r\\n507852 0\\r\\n492148 0\\r\\n489545 9858\\r\\n489631 11995\\r\\n490865 14012\\r\\n491570 15795\\r\\n492996 17376\\r\\n495001 18605\\r\\n496671 19452\\r\\n498570 19850\\r\\n500373 19859\\r\\n502484 19363\\r\\n505000 18605\\r\\n506393 17344\\r\\n507857 15808\\r\\n', 'output': ['15705\\r\\n']}, {'input': '4\\r\\n889308 0\\r\\n110692 0\\r\\n0 461939\\r\\n146447 815492\\r\\n', 'output': ['778617\\r\\n']}, {'input': '5\\r\\n785915 0\\r\\n214085 0\\r\\n40939 436592\\r\\n128612 706421\\r\\n358143 873184\\r\\n', 'output': ['571831\\r\\n']}, {'input': '5\\r\\n999990 0\\r\\n0 0\\r\\n0 1000000\\r\\n1000000 1000000\\r\\n500000 50000\\r\\n', 'output': ['473685\\r\\n']}, {'input': '8\\r\\n3 0\\r\\n0 0\\r\\n0 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n2 1\\r\\n3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 4\\r\\n3 4\\r\\n2 2\\r\\n1 1\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n999998 999999\\r\\n1000000 999999\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n999998 999999\\r\\n1000000 999999\\r\\n1 1\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n500944 0\\r\\n499056 0\\r\\n498479 979\\r\\n498437 1288\\r\\n499191 1574\\r\\n499413 1796\\r\\n499300 1937\\r\\n500000 1987\\r\\n499995 1934\\r\\n500587 1796\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n3 4\\r\\n2 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n4 0\\r\\n0 0\\r\\n2 2\\r\\n3 4\\r\\n2 5\\r\\n4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 5\\r\\n3 5\\r\\n2 3\\r\\n2 2\\r\\n1 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n10 0\\r\\n0 0\\r\\n2 2\\r\\n1 3\\r\\n1 6\\r\\n', 'output': ['7\\r\\n']}, {'input': '8\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999999 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999998 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '6\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n2 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n999999 0\\r\\n0 0\\r\\n999999 999998\\r\\n1 1\\r\\n1000000 1000000\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n7 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n7 8\\r\\n5 8\\r\\n4 12\\r\\n6 12\\r\\n5 11\\r\\n6 10\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n12 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n10 12\\r\\n24 12\\r\\n16 4\\r\\n12 4\\r\\n14 6\\r\\n12 8\\r\\n', 'output': ['5\\r\\n']}]", "id": 177, "lang": "python2", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name \u2014 The Huff-puffer.So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with \u03b1 liters of petrol (\u03b1\u2009\u2265\u200910 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with \u03b1 liters of petrol. Otherwise, he doesn't stop at the station and drives on. For example, if \u03b1\u2009=\u200943.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42\u2009+\u200943.21\u2009=\u200949.63 liters. The next stop is at the station number 12, 9.63\u2009+\u200943.21\u2009=\u200952.84. The next stop is at the station number 17 and so on. You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the \u03b1 number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.", "input_specification": "The first line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number \u03b1\u2009\u2265\u200910, to which such a succession of stops corresponds.", "output_specification": "Print in the first line \"unique\" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line \"not unique\".", "notes": "NoteIn the second example the answer is not unique. For example, if \u03b1\u2009=\u200910, we'll have such a sequence as 1, 2, 3, and if \u03b1\u2009=\u200914, the sequence will be 1, 2, 4.", "sample_inputs": ["3\n1 2 4", "2\n1 2"], "sample_outputs": ["unique\n5", "not unique"], "src_uid": "bfbd7a73e65d240ee7e8c83cc68ca0a1", "lang_cluster": "Python", "difficulty": 1800, "human_solution": "I = lambda: map(int, raw_input().split())\n\nn = input()\nS = [None]*n\nS = I()\n#print S\ncounter = 1\ndecr = 0\nalpha = 0.0\nlower = 0.0\n\nfor i in xrange(n):\n    if(i == 0):\n        alpha = 10*S[0]+10\n        decr = 10*S[0]\n        counter += 1\n    else:\n        decr = 10*(S[i]-S[i-1]) + decr\n        alpha = min(alpha,(decr + 10 )/float (counter))\n        #print \" alpha = \" , alpha\n        if S[i]-1 != S[i-1]:\n            lower = max(lower, ( decr )/float (counter))\n            #print \"lower = \", lower\n        counter += 1\n\nalpha = alpha - 0.0000000001\nif lower == 0.0 : lower = 10.0\n\n#print \" alpha = \" , alpha\n\nfuel = counter*alpha - decr\nleast = counter*lower - decr\n#print fuel , least\n\nif int(fuel)/10 == int(least)/10 :\n    print \"unique\"\n    print S[n-1]+ int(fuel)/10\nelse:\n    print \"not unique\"\n        \n", "testcases": "[{'input': '3\\r\\n1 2 4\\r\\n', 'output': ['unique\\r\\n5\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '1\\r\\n5\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '3\\r\\n1 3 4\\r\\n', 'output': ['unique\\r\\n6\\r\\n']}, {'input': '5\\r\\n1 2 3 5 6\\r\\n', 'output': ['unique\\r\\n7\\r\\n']}, {'input': '6\\r\\n1 2 3 5 6 7\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '10\\r\\n1 2 4 5 7 8 9 11 12 14\\r\\n', 'output': ['unique\\r\\n15\\r\\n']}, {'input': '10\\r\\n1 3 5 6 8 10 12 13 15 17\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '9\\r\\n2 5 7 10 12 15 17 20 22\\r\\n', 'output': ['unique\\r\\n25\\r\\n']}, {'input': '10\\r\\n7 14 21 28 35 42 49 56 63 70\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '15\\r\\n5 11 16 22 28 33 39 45 50 56 62 67 73 79 84\\r\\n', 'output': ['unique\\r\\n90\\r\\n']}, {'input': '17\\r\\n5 11 16 22 28 33 39 45 50 56 62 67 73 79 84 90 96\\r\\n', 'output': ['unique\\r\\n101\\r\\n']}, {'input': '15\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24\\r\\n', 'output': ['unique\\r\\n25\\r\\n']}, {'input': '16\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25\\r\\n', 'output': ['unique\\r\\n27\\r\\n']}, {'input': '17\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27\\r\\n', 'output': ['unique\\r\\n29\\r\\n']}, {'input': '18\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27 29\\r\\n', 'output': ['unique\\r\\n30\\r\\n']}, {'input': '19\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27 29 30\\r\\n', 'output': ['unique\\r\\n32\\r\\n']}, {'input': '20\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27 29 30 32\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '18\\r\\n49999 99998 149998 199997 249996 299996 349995 399994 449994 499993 549992 599992 649991 699990 749990 799989 849988 899988\\r\\n', 'output': ['unique\\r\\n949987\\r\\n']}, {'input': '20\\r\\n49999 99998 149998 199997 249996 299996 349995 399994 449994 499993 549992 599992 649991 699990 749990 799989 849988 899988 949987 999986\\r\\n', 'output': ['unique\\r\\n1049986\\r\\n']}, {'input': '33\\r\\n9 19 29 39 49 59 69 79 89 99 109 119 129 139 149 159 168 178 188 198 208 218 228 238 248 258 268 278 288 298 308 318 327\\r\\n', 'output': ['unique\\r\\n337\\r\\n']}, {'input': '46\\r\\n40 81 122 162 203 244 284 325 366 406 447 488 528 569 610 650 691 732 772 813 854 894 935 976 1016 1057 1098 1138 1179 1220 1260 1301 1342 1382 1423 1464 1504 1545 1586 1626 1667 1708 1748 1789 1830 1870\\r\\n', 'output': ['unique\\r\\n1911\\r\\n']}, {'input': '50\\r\\n19876 39753 59629 79506 99382 119259 139135 159012 178889 198765 218642 238518 258395 278271 298148 318025 337901 357778 377654 397531 417407 437284 457160 477037 496914 516790 536667 556543 576420 596296 616173 636050 655926 675803 695679 715556 735432 755309 775186 795062 814939 834815 854692 874568 894445 914321 934198 954075 973951 993828\\r\\n', 'output': ['unique\\r\\n1013704\\r\\n']}, {'input': '50\\r\\n564 1129 1693 2258 2822 3387 3951 4516 5080 5645 6210 6774 7339 7903 8468 9032 9597 10161 10726 11290 11855 12420 12984 13549 14113 14678 15242 15807 16371 16936 17500 18065 18630 19194 19759 20323 20888 21452 22017 22581 23146 23710 24275 24840 25404 25969 26533 27098 27662 28227\\r\\n', 'output': ['unique\\r\\n28791\\r\\n']}, {'input': '76\\r\\n342 684 1027 1369 1711 2054 2396 2738 3081 3423 3765 4108 4450 4792 5135 5477 5819 6162 6504 6846 7189 7531 7873 8216 8558 8900 9243 9585 9927 10270 10612 10954 11297 11639 11981 12324 12666 13009 13351 13693 14036 14378 14720 15063 15405 15747 16090 16432 16774 17117 17459 17801 18144 18486 18828 19171 19513 19855 20198 20540 20882 21225 21567 21909 22252 22594 22936 23279 23621 23963 24306 24648 24991 25333 25675 26018\\r\\n', 'output': ['unique\\r\\n26360\\r\\n']}, {'input': '100\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27 29 30 32 33 35 37 38 40 42 43 45 46 48 50 51 53 55 56 58 59 61 63 64 66 67 69 71 72 74 76 77 79 80 82 84 85 87 88 90 92 93 95 97 98 100 101 103 105 106 108 110 111 113 114 116 118 119 121 122 124 126 127 129 131 132 134 135 137 139 140 142 144 145 147 148 150 152 153 155 156 158 160 161\\r\\n', 'output': ['unique\\r\\n163\\r\\n']}, {'input': '101\\r\\n3 7 10 14 18 21 25 28 32 36 39 43 46 50 54 57 61 64 68 72 75 79 82 86 90 93 97 100 104 108 111 115 118 122 126 129 133 137 140 144 147 151 155 158 162 165 169 173 176 180 183 187 191 194 198 201 205 209 212 216 219 223 227 230 234 237 241 245 248 252 255 259 263 266 270 274 277 281 284 288 292 295 299 302 306 310 313 317 320 324 328 331 335 338 342 346 349 353 356 360 364\\r\\n', 'output': ['unique\\r\\n367\\r\\n']}]", "id": 178, "lang": "python2", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "You already know that Valery's favorite sport is biathlon. Due to your help, he learned to shoot without missing, and his skills are unmatched at the shooting range. But now a smaller task is to be performed, he should learn to complete the path fastest.The track's map is represented by a rectangle n\u2009\u00d7\u2009m in size divided into squares. Each square is marked with a lowercase Latin letter (which means the type of the plot), with the exception of the starting square (it is marked with a capital Latin letters S) and the terminating square (it is marked with a capital Latin letter T). The time of movement from one square to another is equal to 1 minute. The time of movement within the cell can be neglected. We can move from the cell only to side-adjacent ones, but it is forbidden to go beyond the map edges. Also the following restriction is imposed on the path: it is not allowed to visit more than k different types of squares (squares of one type can be visited an infinite number of times). Squares marked with S and T have no type, so they are not counted. But S must be visited exactly once \u2014 at the very beginning, and T must be visited exactly once \u2014 at the very end.Your task is to find the path from the square S to the square T that takes minimum time. Among all shortest paths you should choose the lexicographically minimal one. When comparing paths you should lexicographically represent them as a sequence of characters, that is, of plot types.", "input_specification": "The first input line contains three integers n, m and k (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u200950,\u2009n\u00b7m\u2009\u2265\u20092,\u20091\u2009\u2264\u2009k\u2009\u2264\u20094). Then n lines contain the map. Each line has the length of exactly m characters and consists of lowercase Latin letters and characters S and T. It is guaranteed that the map contains exactly one character S and exactly one character T. Pretest 12 is one of the maximal tests for this problem.", "output_specification": "If there is a path that satisfies the condition, print it as a sequence of letters \u2014 the plot types. Otherwise, print \"-1\" (without quotes). You shouldn't print the character S in the beginning and T in the end. Note that this sequence may be empty. This case is present in pretests. You can just print nothing or print one \"End of line\"-character. Both will be accepted.", "notes": null, "sample_inputs": ["5 3 2\nSba\nccc\naac\nccc\nabT", "3 4 1\nSxyy\nyxxx\nyyyT", "1 3 3\nTyS", "1 4 1\nSxyT"], "sample_outputs": ["bcccc", "xxxx", "y", "-1"], "src_uid": "1d73b315694f2ebbf796654193372730", "lang_cluster": "Python", "difficulty": 2400, "human_solution": "import sys\nfrom array import array  # noqa: F401\nfrom itertools import combinations\nfrom collections import deque\n\n\ndef input():\n    return sys.stdin.buffer.readline().decode('utf-8')\n\n\nn, m, k = map(int, input().split())\nchars = (\n    ['}' * (m + 2)]\n    + ['}' + ''.join('{' if c == 'S' else '|' if c == 'T' else c for c in input().rstrip()) + '}' for _ in range(n)]\n    + ['}' * (m + 2)]\n)\ncbit = [[1 << (ord(c) - 97) for c in chars[i]] for i in range(n + 2)]\n\nsi, sj, ti, tj = 0, 0, 0, 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if chars[i][j] == '{':\n            si, sj = i, j\n            cbit[i][j] = 0\n        if chars[i][j] == '|':\n            ti, tj = i, j\n\n\nans = inf = '*' * (n * m)\n\nfor comb in combinations([1 << i for i in range(26)], r=k):\n    enabled = sum(comb)\n\n    dp = [[inf] * (m + 2) for _ in range(n + 2)]\n    dp[ti][tj] = ''\n    dq = deque([(ti, tj, '')])\n    while dq:\n        i, j, s = dq.popleft()\n        if dp[i][j] < s:\n            continue\n        for di, dj in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if (cbit[di][dj] & enabled) != cbit[di][dj]:\n                continue\n            pre = chars[di][dj] if cbit[di][dj] else ''\n            l = 1 if cbit[di][dj] else 0\n            if (len(dp[di][dj]) > len(s) + l or len(dp[di][dj]) == len(s) + l and dp[di][dj] > pre + s):\n                dp[di][dj] = pre + s\n                if l:\n                    dq.append((di, dj, pre + s))\n\n    if len(ans) > len(dp[si][sj]) or len(ans) == len(dp[si][sj]) and ans > dp[si][sj]:\n        ans = dp[si][sj]\n\nprint(ans if ans != inf else -1)\n", "testcases": "[{'input': '5 3 2\\r\\nSba\\r\\nccc\\r\\naac\\r\\nccc\\r\\nabT\\r\\n', 'output': ['bcccc\\r\\n']}, {'input': '3 4 1\\r\\nSxyy\\r\\nyxxx\\r\\nyyyT\\r\\n', 'output': ['xxxx\\r\\n']}, {'input': '1 3 3\\r\\nTyS\\r\\n', 'output': ['y\\r\\n']}, {'input': '1 4 1\\r\\nSxyT\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 3 3\\r\\nSaT\\r\\n', 'output': ['a\\r\\n']}, {'input': '3 4 1\\r\\nSbbT\\r\\naaaa\\r\\nabba\\r\\n', 'output': ['bb\\r\\n']}, {'input': '3 5 2\\r\\nSbcaT\\r\\nacbab\\r\\nacccb\\r\\n', 'output': ['aacccaa\\r\\n']}, {'input': '3 4 1\\r\\nSbbb\\r\\naaaT\\r\\nabbc\\r\\n', 'output': ['aaa\\r\\n']}, {'input': '3 4 2\\r\\nSbbb\\r\\naabT\\r\\nabbc\\r\\n', 'output': ['aab\\r\\n']}, {'input': '1 2 1\\r\\nST\\r\\n', 'output': ['\\r\\n']}, {'input': '4 5 3\\r\\nabaaa\\r\\nbabaT\\r\\nSabba\\r\\naaaaa\\r\\n', 'output': ['aaba\\r\\n']}, {'input': '6 6 3\\r\\npkhipk\\r\\nmlfmak\\r\\naqmbae\\r\\ndlbfSj\\r\\ndpbjcr\\r\\naTbqbm\\r\\n', 'output': ['cbqb\\r\\n']}, {'input': '1 20 3\\r\\nacbccbbddbffScTadffd\\r\\n', 'output': ['c\\r\\n']}, {'input': '1 30 2\\r\\nbmjcfldkloleiqqiTnmdjpaSckkijf\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 40 1\\r\\nfaSfgfTcfadcdfagfbccbffbeaaebagbfcfcgdfd\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 50 3\\r\\nSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaTaaaaaaaaaaa\\r\\n', 'output': ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n']}, {'input': '5 10 4\\r\\naaaaaaaaaa\\r\\naaaaaTaaaa\\r\\naaaaaaaSaa\\r\\naaaaaaaaaa\\r\\naaaaaaaaaa\\r\\n', 'output': ['aa\\r\\n']}, {'input': '5 3 4\\r\\naaT\\r\\nacc\\r\\nbbb\\r\\nbbc\\r\\ncSb\\r\\n', 'output': ['bbbc\\r\\n']}, {'input': '5 5 1\\r\\ncaTbc\\r\\ndccac\\r\\ndacda\\r\\naacaS\\r\\ncdcab\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 8 2\\r\\nbdcdcbfa\\r\\ndecffcce\\r\\ndTffdacb\\r\\neeedcdbb\\r\\nfdbbbcba\\r\\nddabfcda\\r\\nabdbSeed\\r\\nbdcdcffa\\r\\ncadbaffa\\r\\nfcccddad\\r\\n', 'output': ['bbbbee\\r\\n']}, {'input': '20 10 3\\r\\nebebccacdb\\r\\neeebccddeT\\r\\neadebecaac\\r\\nadeeeaccbc\\r\\nbaccccdaed\\r\\ndeabceabba\\r\\ndadbecbaaa\\r\\neacbbcedcb\\r\\naeeScdbbab\\r\\nbabaecaead\\r\\nbacdbebeae\\r\\naacbadbeec\\r\\nacddceecca\\r\\nacaeaebaba\\r\\ncdddeaaeae\\r\\neabddadade\\r\\nddddaeaeed\\r\\nbccbaacadd\\r\\ndccccbabdc\\r\\necdaebeccc\\r\\n', 'output': ['bbbcccaccaac\\r\\n']}, {'input': '15 10 4\\r\\nsejwprqjku\\r\\npnjsiopxft\\r\\nrsplgvwixq\\r\\nendglkchxl\\r\\nftihbbexgh\\r\\nsxtxbbavge\\r\\njcdkusfnmr\\r\\nskgsqvflia\\r\\nkcxmcxjpae\\r\\namaiwcfile\\r\\nnjgjSunmwd\\r\\nldxvahgreu\\r\\necmrajbjuT\\r\\nnaioqigols\\r\\npbwrmxkltj\\r\\n', 'output': ['aajbju\\r\\n']}, {'input': '15 3 4\\r\\nllv\\r\\nttT\\r\\nhbo\\r\\nogc\\r\\nkfe\\r\\ngli\\r\\nfbx\\r\\nkfp\\r\\nspm\\r\\ncxc\\r\\nndw\\r\\nSoa\\r\\npfh\\r\\nedr\\r\\nxmv\\r\\n', 'output': ['-1\\r\\n']}, {'input': '15 15 3\\r\\ncbbdccabdcbacbd\\r\\nbcabdcacadacdbc\\r\\ncbcddbbcdbddcad\\r\\nddcabdbbdcabbdc\\r\\naabadcccTcabdbb\\r\\ncbacaaacaabdbbd\\r\\ndbdcbSdabaadbdb\\r\\ndbbaddcdddaadbb\\r\\nbbddcdcbaccbbaa\\r\\nadadadbdbbddccc\\r\\ncddbbdaddcbbdcc\\r\\nbbaadcdbbcaacca\\r\\nadbdcdbbcbddbcd\\r\\ncdadbcccddcdbda\\r\\ncbcdaabdcabccbc\\r\\n', 'output': ['aaca\\r\\n']}, {'input': '20 20 2\\r\\nddadfcdeTaeccbedeaec\\r\\nacafdfdeaffdeabdcefe\\r\\nabbcbefcdbbbcdebafef\\r\\nfdafdcccbcdeeaedeffc\\r\\ndfdaabdefdafabaabcef\\r\\nfebdcabacaaaabfacbbe\\r\\nabfcaacadfdbfdbaaefd\\r\\ndacceeccddccaccdbbce\\r\\ncacebecabedbddfbfdad\\r\\ndacbfcabbebfddcedffd\\r\\ncfcdfacfadcfbcebebaa\\r\\nddfbebafaccbebeefbac\\r\\nebfaebacbbebdfcbcbea\\r\\ndfbaebcfccacfeaccaad\\r\\nedeedeceebcbfdbcdbbe\\r\\nafaacccfbdecebfdabed\\r\\nddbdcedacedadeccaeec\\r\\necbSeacbdcccbcedafef\\r\\ncfdbeeffbeeafccfdddb\\r\\ncefdbdfbabccfdaaadbf\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10 2\\r\\nbaaaaaaaaa\\r\\nbffacffffa\\r\\nbggaccggga\\r\\nbbbSccchha\\r\\nbdddddccia\\r\\nbjddccccca\\r\\nbkkdddTaaa\\r\\nblllddblla\\r\\nbmmmmdbmma\\r\\nbbbbbbbbbb\\r\\n', 'output': ['ccccc\\r\\n']}, {'input': '10 20 3\\r\\nbaaaaaaaaaaaaaaaaaaa\\r\\nbfffffffacfffffffffa\\r\\nbgggggggaccgggggggga\\r\\nbbbbbbbbSccchhhhhhha\\r\\nbiiiiidddddcciiiiiia\\r\\nbjjjjjjddcccccjjjjja\\r\\nbkkkkkkkdddTaaaaaaaa\\r\\nbllllllllddbllllllla\\r\\nbmmmmmmmmmdbmmmmmmma\\r\\nbbbbbbbbbbbbbbbbbbbb\\r\\n', 'output': ['ccccc\\r\\n']}, {'input': '20 10 4\\r\\nbaaaaaaaaa\\r\\nbffacffffa\\r\\nbggaccggga\\r\\nbhhaccchha\\r\\nbiiaccccia\\r\\nbjjaccccca\\r\\nbkkakkkkka\\r\\nbllallllla\\r\\nbbbSmmmmma\\r\\nbnnnnnnnna\\r\\nbooooooooa\\r\\nbpppppTaaa\\r\\nbqqqqqbqqa\\r\\nbrrrrrbrra\\r\\nbdddddbssa\\r\\nbtddddbtta\\r\\nbuudddbuua\\r\\nbvvvddbvva\\r\\nbwwwwdbwwa\\r\\nbbbbbbbbbb\\r\\n', 'output': ['mmmno\\r\\n']}, {'input': '20 20 2\\r\\nbaaaaaaaaaaaaaaaaaaa\\r\\nbfffffffacfffffffffa\\r\\nbgggggggaccgggggggga\\r\\nbhhhhhhhaccchhhhhhha\\r\\nbiiiiiiiacccciiiiiia\\r\\nbjjjjjjjacccccjjjjja\\r\\nbkkkkkkkacccccckkkka\\r\\nblllllllacccccccllla\\r\\nbbbbbbbbSccccccccmma\\r\\nbddddddddddcccccccna\\r\\nbodddddddcccccccccca\\r\\nbppddddddddTaaaaaaaa\\r\\nbqqqdddddddbqqqqqqqa\\r\\nbrrrrddddddbrrrrrrra\\r\\nbsssssdddddbsssssssa\\r\\nbttttttddddbttttttta\\r\\nbuuuuuuudddbuuuuuuua\\r\\nbvvvvvvvvddbvvvvvvva\\r\\nbwwwwwwwwwdbwwwwwwwa\\r\\nbbbbbbbbbbbbbbbbbbbb\\r\\n', 'output': ['ccccc\\r\\n']}, {'input': '1 2 4\\r\\nST\\r\\n', 'output': ['\\r\\n']}, {'input': '3 3 1\\r\\naaa\\r\\naaa\\r\\nTSa\\r\\n', 'output': ['\\r\\n']}, {'input': '2 1 1\\r\\nS\\r\\nT\\r\\n', 'output': ['\\r\\n']}, {'input': '1 10 2\\r\\nbaaSaaTacb\\r\\n', 'output': ['aa\\r\\n']}, {'input': '2 1 4\\r\\nS\\r\\nT\\r\\n', 'output': ['\\r\\n']}]", "id": 179, "lang": "python3", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
{"description": "Everyone knows that long ago on the territory of present-day Berland there lived Bindian tribes. Their capital was surrounded by n hills, forming a circle. On each hill there was a watchman, who watched the neighbourhood day and night.In case of any danger the watchman could make a fire on the hill. One watchman could see the signal of another watchman, if on the circle arc connecting the two hills there was no hill higher than any of the two. As for any two hills there are two different circle arcs connecting them, the signal was seen if the above mentioned condition was satisfied on at least one of the arcs. For example, for any two neighbouring watchmen it is true that the signal of one will be seen by the other.An important characteristics of this watch system was the amount of pairs of watchmen able to see each other's signals. You are to find this amount by the given heights of the hills.", "input_specification": "The first line of the input data contains an integer number n (3\u2264n\u226410^6), n \u2014 the amount of hills around the capital. The second line contains n numbers \u2014 heights of the hills in clockwise order. All height numbers are integer and lie between 1 and 10^9.\n", "output_specification": "Print the required amount of pairs.\n", "notes": null, "sample_inputs": ["5\n1 2 4 5 3\n"], "sample_outputs": ["7\n"], "src_uid": "5_E", "lang_cluster": "Python", "difficulty": 2400, "human_solution": "get_nums = lambda : [int(w) for w in input().split()]\n    \nN = int(input())\nnums = get_nums()\nidx = nums.index(max(nums))\nnums = nums[idx:] + nums[:idx]\n    \n# nums.append(nums[0])\n# left = [0] * len(N)\nstk = []\nresult = 0\nfor i,n in enumerate(nums):\n    if not stk or n < stk[-1][0]:\n        stk.append([n, 1])\n    elif n == stk[-1][0]:\n        stk[-1][1] += 1\n    else:\n        while stk and stk[-1][0] < n:\n            result += stk[-1][1] * (stk[-1][1] - 1) // 2 + stk[-1][1] * 2\n            stk.pop()\n        if n == stk[-1][0]:\n            stk[-1][1] += 1\n        else:\n            stk.append([n, 1])\n    \n# if len(stk) > 1:\n#     result -= stk[-1][1]\n    \nwhile len(stk) > 1:\n    result += stk[-1][1] * 2 + stk[-1][1] * (stk[-1][1] - 1) // 2\n    if len(stk) == 2 and stk[0][1] == 1:\n        result -= stk[-1][1]\n    stk.pop()\nif stk:\n    result += stk[0][1] * (stk[0][1] - 1) //2\nprint(result)", "testcases": "[{'input': ['5\\r\\n1 2 4 5 3\\r\\n'], 'output': ['7\\r\\n']}, {'input': ['3\\r\\n2118 2118 2118\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['3\\r\\n2221 1976 2221\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['3\\r\\n140 989 2895\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['4\\r\\n2440 2440 2440 2440\\r\\n'], 'output': ['6\\r\\n']}, {'input': ['4\\r\\n1178 1178 2577 2577\\r\\n'], 'output': ['6\\r\\n']}, {'input': ['4\\r\\n332 2714 2420 2714\\r\\n'], 'output': ['5\\r\\n']}, {'input': ['5\\r\\n763 763 763 763 763\\r\\n'], 'output': ['10\\r\\n']}, {'input': ['5\\r\\n4136 1826 4136 1826 1826\\r\\n'], 'output': ['8\\r\\n']}, {'input': ['5\\r\\n3581 3581 305 305 3581\\r\\n'], 'output': ['8\\r\\n']}, {'input': ['10\\r\\n8097 8097 8097 8097 8097 8097 8097 8097 8097 8097\\r\\n'], 'output': ['45\\r\\n']}, {'input': ['10\\r\\n4972 4972 4972 4858 4858 4972 4972 4972 4858 4972\\r\\n'], 'output': ['28\\r\\n']}, {'input': ['10\\r\\n1620 8260 1620 3994 3994 8260 8260 1620 1620 3994\\r\\n'], 'output': ['19\\r\\n']}, {'input': ['10\\r\\n5938 4836 5938 5938 4836 4836 2780 2780 1495 4836\\r\\n'], 'output': ['21\\r\\n']}, {'input': ['10\\r\\n6090 3360 6090 6313 1608 6313 4087 3360 1608 1608\\r\\n'], 'output': ['19\\r\\n']}]", "id": 803, "lang": "python3", "program_synthesis_0": "", "program_synthesis_1": "", "program_synthesis_2": "", "program_synthesis_3": "", "program_synthesis_4": ""}
